# Initialising and accessing 2D arrays
Videoâ€¢
. Duration: 10 minutes
10 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/Hvda7/initialising-and-accessing-2d-arrays

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Arrays can store a series of elements which can be any type, Booleans, strings, numbers or objects. They can also store arrays, making an array, which is elements of other arrays. Often, we call these two-dimensional arrays. These are very useful when we have grids or matrices of information. Let's look at a couple of quick examples, then we'll look at some real code. You create 2D arrays in much the same way, you create 1D arrays. Here is the declaration for an array called my2DArray. Remember, we know it's an array because we are using square brackets to start its declaration. But this is still only a one dimensional array. For this to be a 2D array, we need to make the elements of the array also arrays of values. So we nest sets of square brackets into the arrays declaration like this. Now the array, my2DArray, has one element. And that element is an array with three numbers stored into it. Each separated by comma. Let's add some more elements. Now, my2DArray has three elements, and each contain a list of numbers. They can be of any length. For example, the final element of my2DArray has four numbers, not three. As with one dimensional arrays, you can mix different types together, numbers with strings and Booleans. Okay, now let's access some of these elements. Let's start by accessing the first element of my2DArray. This is exactly the same as you've seen before. We're using the square brackets to access element 0, and print it to the console. If we take a look at the console, you can see that the first array stored at index 0 is printed to the console. Let's look deeper into my2DArray, and retrieve some of elements of the inner array. Let's start by looking at accessing the first element of the first element of my2DArray. We are using square brackets to get the 0 element of my2DArray. Which will return an array and another set of square brackets right after to get to the first element of the inner array. If we look at that output, we can see that the line of code gives us the value 1 from the first element of the first element of my2DArray. Let's access some other elements. Here, we are accessing the element at index 1 of my2DArray. And then accessing the element at index 2. So the third number in the array and this will print out 6. Finally, let's look at the last element of my2DArray, index 2. And the final element of the inner array which is index 3. As we have four elements in this array, this prints 10 to the console. Let's look at another example in some real code. Okay, so I've got here another 2D array for us to look at. This time, it is a list of strings and they are series of names. So it's an array called groups. We can imagine this is like a group, groups of school children in a class. They're all grouped by first name in this case, so we can easily see which element they come from. So the first element of the groups array is this array whether all the names begin with A. The second element is whether all begin with B, and so on, only down to F. So, let's take a quick look at this in the consoles. So I've got this program running, it's not going to do anything flashy to the screen, we're just going to play around with the console. So let's output this right, so console.log and groups. So we can see now array and we have to look inside it and nest down through it, and we can see here the list of people. That way, there is a nice little console trick you can do when you've got two-dimensional data. Instead of using console.log, let's try console.table, open brackets and the name of our array. And it's going to print out really neatly for us. So we can see who all the students within the groups is organized. And we can even look down through certain indexes to find particular people. So let's start by looking for Eric. So we will write this out just to the console. So console.log, in fact, let's hide this, not make it too easy for ourselves. console.log, and its groups, and we are looking for Eric. So 0, 1, 2, 3, 4, so in the fourth element of the groups array, we have the Es, the group of the Es. And then we are looking for Eric who is the 0, 1, 2, 3, the element index 3, beside the fourth one, right. Let's save him on that. And hopefully, we should be able to see if look at the inspector, that is going to print Eric to the console. Let's do one more. So this time, let's look for Betty. So console.log groups, Betty, she's in the second element of the groups rank. This is for the Bs so that will be index 1. And then she is the 0, first, second, three again. All right, okay. So now, we're printing Eric and Betty to the screen. This is great but what about if we want iterate through all the elements. Well, then we're going to have to use a nested for loop. So similar to Simon will have shown you with grids. So let's start by doing that, so 4 var i = 0, i is less than, oops, a notch on the touch pad. So i is less than groups.length; i++. Right, to start with, let's just print out each element that's in the outer array. So we're going to see printed to the console the four, the five arrays that make up groups. So let's do that, so console.log groups and i. Save that, there we go, so we're now printing out I think six arrays to the console. Now let's run printout each individual element of those inner arrays line by line. So we need another for loop inside our first one. So let's do for. Now we can't use i again because it's still in scope from the outer for loop. So let's switch to j, var j = 0. And we want to iterate through this while j is less than groups [i].length. Now, this is a little tricky because what we want to do is, we are iterating through whichever element of groups is at index i. So we need to say, groups [i].length, so we're iterating over the right length of the array. And then it's going to be j++, okay. Now we should just be able to do console.log() and we want to output that specific element to the array, so let's do groups i and j. So we're now saying, get me the ith element of groups and then get me the jth element of the array that's returned. So let's try that, and there we go. We've now printed out all and the various different students in these groups array. Be careful with these 2D arrays, make sure that you're consistently using the right letters. It's very easy when you copy this down or you go into autopilot and do something like that, so you do i++ rather than j++. Also make sure that you have these, the right way around. So it's i for the outer array and j for the inner one. Okay, that's a quick look through 2D arrays. You'll get more experience with these as you use them. And you will get your head round a little bit more that's it's element within element. These things will start to make sense, I promise, after a little while and a little practice. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 8.1 Two dimensional arrays Video: Video Initialising and accessing 2D arrays . Duration: 10 minutes 10 min Practice Assignment: 2D arrays . Duration: 15 minutes 15 min Reading: Reading Code it from scratch: Bookcase . Duration: 1 hour 1h Discussion Prompt: Bookcase . Duration: 20 minutes 20 min Lesson 8.2 Nesting objects and arrays Lesson 8.3 patterns
# Exploring a p5 object: Vector
Videoâ€¢
. Duration: 18 minutes
18 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/M747L/exploring-a-p5-object-vector

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Just as p5 has many built-in functions, it also has many built-in objects. The p5 vector is one such objects. It's packed full of useful methods for manipulating and interpreting coordinate data. Let's take a look at it in the p5 reference. So I'm going to just search for p5 vector. Say p5, and you'll see these items come up. I'll just type p5.Vector. So this is the main reference page and we can see straight away that in order to create a vector, we use this function called "Create Vector". We can see that it has three properties an X property, a Y property and a Z property. So the X and Y, you'll be familiar with, that's for when we're dealing with 2D coordinates. If you were dealing with 3D coordinates, which we don't do in this module, you would also need a Z property. Then, we get to the interesting part, the methods. You can see that we have lots and lots of different methods to explore here. So that's what I'm going to do in this video. We're going to start with a code example, which you can download and you can code with me. So in this example, I've created a global variable called myPoints. I've also done something else. I've translated the coordinate space from the origin at the top left-hand corner to maybe the origin in the center of the screen. So if I run this code, you'll see that there is an ellipse drawn in the center of the screen, center of the Canvas, so I should say, but actually when you look at the code for the ellipse, it's drawn at coordinate 0, 0. That's because I've put this translate function here, which translates the coordinate space from this corner into the middle of the screen. So this top left-hand corner is now minus 250 minus 250, and this bottom right-hand corner is now 250, 250. So first of all, let's make a vector object. Now, as I said, to make a vector object you need to use the "Create Vector" function. So what I'm going to do is I'm going to take myPoint and I'm going to say it's equal to create vector, and create vector takes two arguments. It takes the x-coordinate and the y-coordinate. I want my coordinate to start in the middle of the screen, so I could just put here 0, 0. Now the way I could use this vector is instead of putting 0, 0 here, I could put myPoint.x and myPoint.y. You can see that the ellipse is still in the center of the screen. We can also take a look at the vector object in the console. So I can just type myPoint, and you can see that it's this vector object and there is the X, Y and Z property in there. So let's change these values slightly. So what I'm going to do is, I'm going to make the Y-value. I'm going to try and make this ellipse appear up here somewhere. So I'm going to make the Y-value, let's say minus 100. You can see the ellipse has moved up the screen somewhat. So the first method I want to show you is the rotate method. What this method does is, it rotates the coordinates around the origin of 0, 0. So let's look it up in the reference, there it is, rotate. If we click on this method, we get a much more detailed description of what it does. You can see it working here, and we're roughly going to use it to do the same thing. So what I'm aiming to do is to get this ellipse to move around the screen in a circle. A really important point to make about the rotate method, is that the angle which it takes is not in degrees, it's in radians. So a complete rotation in radians is worth two Pi, and a half rotation would just be Pi, and a quarter rotation would be half of Pi, and so on. So let's try this out first of all. So in setup, I'm going to type myPoint, and to use the methods, I have to put a dot and then I have to type rotate, and I'm going to put in the angle of rotation in radians. So I could use Pi, which is a built-in number in p5.js, and I could multiply it by two. Now, that's a silly rotation to do. I'm going to do it now. You can see that we see no change, and that's because Pi is a complete rotation. Sorry, two Pi is a complete rotation. Let's do just a half rotation. So I'm going to rotate by just Pi, and now you can see that the ellipse has moved to the bottom side because we did 180 degrees. Now, I'm going to do just a quarter rotation. Sorry, I did Pi divided by four, I mean Pi divided by two. So this would be a quarter rotation. So that takes us to Three O'clock, or I could even do a smaller rotation again and we end up at half-past one there. So now, what I'm going to do is instead of doing that rotation, I'm going to rotate myPoint in the draw loop. So thinking about the maximum amounts of rotation going all the way around is two Pi, I really want to go for a very small number in this rotation. So I think I'm going to go for no 0.01. So I'm just going to type here myPoint.rotate0.01. Now, when we look at the sketch, we can see that this ellipse is rotating. I think I want to make this clearer. So what I'm going to do is I'm now going to draw a line, and I will draw a line from 0, 0 to myPoint.xmyPointdot.y, I should check that stroke is set to something that we can see. I seem to have crushed the Roosevelt, I'll just try that again. Okay. So now we can see our rotation happening clearly. Okay, I want to take a look at another method, and that's the MOOCs methods. So I've got it here in the p5 reference. You can see that it says, "Multiply the vector by a scalar." Now, the scalar is just a fixed number. It might be 0.5. It might be two or four or so on. What this means is that when we call mult and we feed through a scalar, p5 multiplies the x property of the vector by the scalar and the y property of vector by the scalar. Let me show you what I mean in my code. So I'm going to take my points and I'm going to multiply it by two. What that means is that this vector instead of being zero minus 100 would become zero minus 200. Let's look at what happens in the output. So now you can see the line is double the length, and the ellipse is double the distance away from the center. Let's multiply it by a different number. Let's multiply it by 0.5. Now we can see that the line is half the length of the original size, and the ellipse is that much closer to the center as well. So that's how mult works. But we're going to use it in a slightly different way this time. I'm going to use what's called a static version of the method. This applies for all of the methods of the p5 vector objects. They all have a static version. So to use the static version, I'm going to click on mult in the reference to have a look at how you do this. So the static version is invoked by typing p5.Vector before the mult method. Then, we have to do something slightly different, instead of just passing through a single number, we have to pass through the vector object and the number to multiply it by. So I'll do it here in my code. I'm going to make a local variable, and I'm going to call it v, and I'm going to say is equal to p5.Vector.mult, and then we have to pass in two arguments. I'm going to pass in my points as the first argument, and I'm going to pass in the number 2 as the second argument. Okay, now if I go back to my code, you'll see now that the length of the line hasn't changed and that's because the static version does not change the object. Instead, it returns a new object which is the changed version. So v is the changed object, whereas my point is unaffected by this method. So now what I want is for my ellipse to appear in one place, but my line to remain the same length. So I'm going to say that the ellipse is v.x and v.y, and we should see a different length line from the ellipse. There we can see that the ellipse is double the distance away compared to the line. I actually want this to be the other way round for my example. So what I'm going to do is I'm going to make my points equal to zero minus 200 here, and I'm going to make this number 0.5. Now we have an ellipse that's halfway along the line, okay? Now that we have used mult, and we've used the static version, let's try and use this to manipulate the ellipse further. So I'm going to make a variable called mul. I'm going to initialize that variable to one. At this point in my code where I had 0.5, I'm going to instead use the variable mul. So there you can see it's a pairing of the same length as the vector. Then what I'm going to do is in key pressed, I can now change mul. So every time I press a key, I could say that mul is 0.01 smaller. So let's try that. You can see as I'm pressing the key, the ellipse is moving in. Maybe you would want to actually make this dependent on the keystrokes. I could say if key equals A, mul gets smaller, maybe I'll make that a bit bigger. Otherwise, we'll make mul bigger instead. Now, we can control quite quickly where the ellipse is on the line with some key presses. I'm going to show you another method now. So imagine I want to draw a lots of random lines now. So I'm going to make another variable and I'm going to call it myPoints, myPoints will be an array. I'm going to add lots of random points to that array. So I'm going to say for var, i equals zero, i is less than, well, let's say we have a 100 random points. I'm going to go to myPoints.push, createVector. I'll say random minus width divided by two, width divided by two. We can do the same, let's split this out a bit. We can do the same for the y-variable, random minus height divided by two, height divided by two. If you're wondering why I've used these values here, it's because we have this coordinate space that starts at minus 250, minus 250, and goes to plus 250, 250. So this code, gives me a random point that can be anywhere within that coordinate space. So what I'm going to do is I'm going to draw my points by traversing through the myPoints array. So I say for var, i equals zero, i is less than myPoints.length, i plus plus. I think what I'll do is I'll draw a line again going from zero, zero to myPoints at index i.x, myPoints at index i.y. There you can see our random lines. So these are all random points that have been generated for us. I might just make them a different color so that we can see them in distinction to our other line. So the method I'm going to show you is called normalize, and what normalize does is it makes sure that the length of each of these lines is equal to one. So let's have a look at it in the documentation. Here it is, it says, "Normalize the vector to length one." So it will do the calculation for us and each of these vectors will be worth one after we've done this. So all I need to do is I could assign this createVector to a variable, a local variable called vase. I'll cut this and push it here, and I'll put v inside these brackets. Before I push it to the array, I'm going to call v.normalize. Now, when I look at the output of my code, well, I can't see anything because those vectors are all so small, they're only one pixel long. But, because I now know they're all exactly the same length, I can multiply them by a number and you'll see the result. So now I have a lot of vectors that are at random angles, but they're all exactly the same length, and this turns out to be really useful when we're programming. Okay, so those are some methods that you can use with the p5 vector. In the next video, what we're going to do is learn how to use these methods to create something. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 9.1 Methods Lesson 9.2 p5 vector - static and non-static methods Video: Video Exploring a p5 object: Vector . Duration: 18 minutes 18 min Video: Video Bringing it all together: Tamagotchi . Duration: 29 minutes 29 min Graded Assignment: p5 vector: static and non-static methods . Duration: 15 minutes 15 min
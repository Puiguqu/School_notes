# Traversing data
Videoâ€¢
. Duration: 16 minutes
16 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/HcUXF/traversing-data

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key In the last topic, we introduced the concept of arrays and for loops, and in this topic we're going to take some of those ideas a little bit further. If you remember back, we did generation of arrays elements using for loops. To start this topic off, we are going to be looking at how to access the elements of the array using a for loop. So, if you download the sketch that's available next to this video, this is the first example, say traverse one. You open it up, you will see a very large array of elements, which is the first 199 words of metamorphosis by Kafka. So, what we're going to do to start off is to print out each of these words to the console. Now, if I was to start off doing console.log, metamorphosis, zero, console.log. I'm going to get bored very quickly. That's 199 things to type out, and it's a very inefficient waste of my time. So, let's use a for loop to speed up this process. So, instead of just console.log, let's do for, and again, we will create a variable called i and initialize it to zero. We'll say i is less than 199 for our condition, and increase the value of i by one each time. Now, remember, that I'm using i less than 199 here rather than less than or equals to, because I want to stop at the last index which will be index number 198 because we're starting to count from zero. Okay, so let's put on our braces and then console.log, open brackets, metamorphosis, open square brackets, and rather than putting in an absolute number, I'm going to put in i. So, the first time we execute this loop, i is going to be equal to zero and the first word, the element stored at index zero of this array is going to be printed to the console. So, if we save this, and it's already running over here. We just need to bring up the inspector to see the console's output. The console, and there we have each word of that array printed out to the console, and we can just check that we've got all of them. So, the last one, the last few even are at the dull weather and the last few elements in my array here are at the dull weather. Not too tricky. All we've done is we've just replaced that magic value, the absolute number with i. So, that's printing stuff out to the console. Now, let's try and step this up a little bit. Let's do something a bit more complicated, and let's try and print this out neatly to the canvas so that each word appears in sequence. So, let's have a go at doing that. So, let's just comment out this code, and let's start by creating a nice big canvas. Let's make it 1,000 by 900 and we'll set a nice dark background, let's say 50. Right, so we've got our canvas going. Let's now do our loop. We'll do it in draw. We could do it in set up, doesn't really matter. But we'll do it in draw. Let's start by just setting up our fill to white. So, we're going to have white text, and we'll set the text size to something quite bold, let's say 40. Now, what we want to do is we want to use a for loop to iterate around this array and print it out to the screen, out to our canvas. Now, we're going to do this in a few stages. So, the first age isn't really going to work but we'll build from that and work upon it. So, let's start with our for loop, and it's going to be basically the same as the one we had before. So, if our i is equal to zero, i is less than 199, and i plus plus for the afterthought, open our brackets. If we were to just do text and metamorphosis of the index of i, where are we going to place this on the screen? This is where the difficulty in this example comes in. So, just to start, let's just place it at 100, 100 and let's just see what happens. So, I save that and run it. Let's take a look in the inspector. Yeah, we've got an error in there. Text size is not defined. That's because that needs to have a capital S. Let's rerun that. There we go, and we can see that all those words have been printed over the top of each other, which is not quite what we want. Let's start by trying to see if we can just sort the x-coordinates. So, let's just place them along the screen. So, each time we print out a word, we want to increase the location where we write it. So, let's create a couple of extra variables and we'll call this var cursorX, and let's set that equal to zero to start off with. We'll revise this text statement here so that the x-coordinate is on cursorX. So, now let's increase cursorX by the width of the text each time. Now, happily, p5.js gives us a text width function that we can use to find out how long a piece of text is going to be. So, each time we write out the text, we want to increase cursorX by the text width of the element that we've just printed to the screen. So, that's going to be metamorphosis, the value in i. Okay, so if we run that, well, we're getting there. It's now not all printing over the top of each other, it's in one great big long line and we've got no spaces. So, we can add the space nice and easily by just doing here plus a space. So, that fixed that problem. Now, we have to handle how we deal with the y-coordinate. So, let's create another variable here called var cursorY and let's set that to be equal to 40 to start with. Because remember, the text is going to be drawn from the bottom of its height, and we now need to increase the value of the y-cursor every time the x-cursor gets to the width of the screen. So, if we say if cursorX is greater than the width of the screen, so width, then what we're going to do is we are going to increase cursorY by 40. We're going to set cursorX to be equal to zero. Okay. So, let's run this and see what happens. It's not quite working, and let's just see what I've missed. Yeah I've see what I've done, I just need to change this 40 here to CursorY. Great. So, that's our text being printed out nicely to the canvas with every word and appearing. It is running over the edge slightly. You can work on that to see if you can fix that, so we don't have that issue. One more example for this video, and we're going back to our planets example from topic five as promised. We're going to need in this up and remove all this repeated code that we have for drawing are each planet. So, to kick us off, let's take all these drawing statements and let's just comment them out. We're not going to be using those, we're going to replace them with just one single for loop. So, to do that, let's go, for var i is equal to zero. So, normal stop and start proposition for a for loop. So, lets say i is less than, how many planets we got, which is eight, and let's do i++. I open our braces. There we go. So, we can now just replicate one of these drawing statements and the for loop will do the work for us. So, if we set fill two colors i close explanation for loop, ellipse and we're going to set this. Now, if you remember, we increased the value of the x-coordinate from 50 for the first planet, and then we increased it by a 125 each time. So, if we do 50 plus i times 125, then we'll have the same effect that we had previously. Okay. So, that's our x-coordinate, our y-coordinate will still be height divided by t. The array of the diameter of the ellipse is going to be sizes i. So, sizes was the name of the array that held and the diameters of each planet. Okay. Semicolon to finish up that line. That we just want to set the fill back to 255 stroke text. The text is going to be names i, and it's going to be the same calculation as where to place it on the x-coordinate. So, that's going to be 50 plus i times 125 comma height divided by two plus 150. So, that's the y-coordinate and let's close at out with a semicolon. So, if I save and run that, hopefully, it should look exactly the same. Well, we've got something not quite right. So, let's have a quick look in our spectrum to see what mistake we've made. So, unexpected token, close parentheses on line 23. So, I've made a little mistake there, we don't need that. There we go. Yes. So, it looks exactly the same as it did before, but we've done it in much, much less code. So, if I delete to this commented out stuff now, we don't need it. Our program has gone from being 65 lines down to 26 lines which is an awful lot shorter we've done an awful lot less typing. Now, this is looking pretty good, but you can see here we've got these arrays that all have to be roughly the same length. So, what will make this even better is, if we changed this series of arrays to an array of planets where each one is an object. So, let's have a go at doing that by comment out these. So, if I create a variable called var planets, and I make this equal to an array again. But, rather than having lots of individual numbers, we can put in objects. So, we did this in exactly the same way. Each object ends with a comma before we put it in the next one and we just placing our key value pairs. So, let's say size is equal to four, so this is the first one for mercury, name is equal to mercury, and color is equal to grey, and that's it for that one. Let's now do objects for Venus. So, its size is nine, and the name is Venus, and the color is brown. Okay. Great. So, we've now created an array of objects rather than an array of numbers and an array of strings. So, we've completed this o down into nice encapsulation of these ideas of each planet. So, all we now need to do is revise our fully political. So, rather than saying colors i, we want to say planets, because that's the name of our array now. It's still the value stored at I, and now we need to use that dot notation to say we want to get to that particular element of that object. The particular element that we want here is color. wise, for the sizes, we replace that with planets i.size, and we replace names i with planets i.name. Okay. Let's run that and see what's going to happen. Yeah. It's exactly the same. So, we've replaced that codes with something that's a lot neater. It also is nice that say NASA changed their mind and they decide again that Pluto is now a planet. We can just add 18 to the end of our array here as a nice new objects. So, let's say the size is one, name is Pluto, and the color might this teal. If we just extend the width of the canvas a little bit to make sure we can get him in. So, let's make this 1,200, and we then just need to change this number here. So, in the conditional part of our for loop, we now need to make this nine, because we now have nine planets. If we save and run that. There's small stake has crept in. Let's just have a look at the console on line 48. I've forgotten that carillon that there we go. Running and as Pluto at the very end there, so tiny we can't even see him. Simon is going to teach you a technique in a video or two's time that's going to eliminate this magic number from here. You won't have to worry about changing that number each time you change the size of the array. Okay. So, we've now looked at how to traverse our data using for loops, and how to store that data in arrays. In the following videos, Simon is going to be showing you more techniques around this, and also how to do nested for loops as well. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 6.1 Advanced work with arrays Video: Video Traversing data . Duration: 16 minutes 16 min Practice Assignment: Traversing data . Duration: 15 minutes 15 min Reading: Reading Hack it: racing robots . Duration: 30 minutes 30 min Discussion Prompt: Racing robots . Duration: 20 minutes 20 min Lesson 6.2: Nested Iteration for drawing patterns Lesson 6.3: More work with arrays Lesson 6.4: Debugging techniques
# User defined functions
Videoâ€¢
. Duration: 9 minutes
9 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/JE7Wd/user-defined-functions

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Up until now, we've been discussing around a rather large and important topic functions. In their essence, functions are just blocks of code which do things. They're really useful for two reasons. Firstly, they allow coders to organize their code into discrete sections. There a little bit like a coders version of the paragraph. Secondly, functions allow code to be reused in different contexts. You'll come to understand how this works over the course of this topic. Now, realize it or not, you've already been using functions extensively throughout your own code. So, far you've been using functions in two different ways. You've defined functions. You do this every time you type function setup or you type function draw. You've called functions. You do this every time you run a P5 command. So, for example when you run the ellipse command that cause the ellipse function. So far, the functions that you've defined and called are the ones already known to P5. They are parts of the P5 library. Now, it's time to branch out and create our own functions. Let's have a look at the basic syntax for declaring a function. So, we have first of all the function keyword and you need to type this every time you declare a function. Second of all, we have the function name. This could be any name that you want. So, I've written my function here but it might be foo or bar or any other name that you can think of. The one thing to remember is not to crossover with keywords that already in P5 JS. So, you couldn't define a new function called draw. You would maybe have a function called draw robot. That would be perfectly fine. ing that, are two round parentheses and then two curly braces and inside the curly braces, you get the function body. Now this is where the code that forms the function is put. Every time you call the function, this code will be executed. Okay. So, let's have a look at calling a function. So, this is a function call to the same one I just went through the definition of. You can see that all you do, is you type the function name and then you type two round parentheses and that will call the function. Okay. So, let's look at this in some real code. So, I've got some example code here which you can download from the platform and code together with me. When you run that code, you'll see that you get this really nice daffodil image. If you look at the code, you can see that all of the drawing for this daffodil happens within the draw function and we've got a few global variables at the top as well. Now, what we're going to do is we're going to separate out this code that draws the flower into its own function and coders call this process refactoring. So, you could imagine if we were drawing lots of different types of flowers and plants our draw function would be very long. So, it might be quite nice rather than having a long draw function to have lots of discrete functions but then get called. So, we can really see in our code what bits of code is doing what. So, I'm going to start by defining my function. So, I type the function keyword. Then I type the name of the function. So, I'm going to call this one draw flower. It's always a good idea to have function names describing what the function does rather than something random. So, if you remember from before, I now need to do two round parentheses. Once I've done that, I need to do two curly braces. I always make sure that I've typed those curly braces, the open and the close one, before I type any of the function body. That way, I don't forget the second curly brace because that's quite easy to do. So once I've done that, what I'm going to do is save the file. If I look at the output, I can see that nothing has changed so far. That's because all I've done is define a function. It's got nothing in it and it also hasn't been called. So, the next thing to do is to cut and paste the code which draws the flower into this function. So, I'm going to cut all of this code and I'm going to paste it here into draw flower and then I'm going to save it again. Now, if I look at the output I'll see but I no longer see the flower and that's because although I still have this code here, it's in a function block that is not yet being called. So, this code is not being executed. So, the way to get it to be executed is to call the draw flower function. So, all I need to do is put draw flower, open the round parenthesis and close them immediately. If I save that, I can see the flower again. So, now this code has been effectively refactored, so that we have a nice neat draw function and we can see that the code to draw the flower is in its own function. So, there's a few more things we can do with this. So, what I'm going to do is I'm going to change the code slightly.. I'm going to put the background function call into the setup function. I'm going to get rid of draw altogether. So, now we'll see nothing again because we're not calling draw flower. But what I'm going to do is instead is, I'm going to use the function mousePressed. Now, if you remember from earlier topics mousePressed is a function that happens every time the user presses the mouse. In this case, what I'm going to do is I'm going to use these variables up here. I'm going to reset them with the mouse position. So, I'm going to say the base X which represents where the base of the flower is on the X dimension. I'm going say that's equal to mouse X. I'm going to say that base Y is equal to mouse Y. I think for the stem what I'll do, so this is for stem heights. I'll put in a random value. So I'll just say random and let's say the minimum value is 100 and the maximum value is 400. Now, once I've changed all of those variables when the user presses the mouse, the next thing I want to do is call the draw flower function. So, that's the final thing I'm going to do. Now, if we go back to our code, back to our outputs and I click the mouse, you can see that I get a different flower every time I click and that the stem is a different heights. So, what we're doing now is we using this function to reuse the code. So, it's allowing us to draw lots of different flowers with exactly the same code. That's a really useful thing that we can do with functions. So, perhaps now you can see that when we use P5 JS, in essence you're just using a series of useful functions that someone else wrote for you. Actually, P5 JS itself relies on a few different libraries. We call libraries that code needs to run dependencies. The dependencies of P5 JS are in essence just a bunch of useful functions written by other groups of people. This lends us an important insight about how coding works. Coders built their programs on top of each other's code. Now, the resulting tiered structure of all of these dependencies is called a software stack. At the very top of the software stack, is the software that the end users interact with and at the bottom end is the code that directly interacts with the machine hardware. Writing code at the top of this structure, is called high-level programming. While writing code at the bottom is called low-level programming. Have a go yourself at defining and calling a function. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 7.1 Functions Video: Video User defined functions . Duration: 9 minutes 9 min Video: Video Returning early and the call stack . Duration: 10 minutes 10 min Practice Assignment: Functions . Duration: 15 minutes 15 min Reading: Reading Code it from scratch: Lights on! . Duration: 1 hour 30 minutes 1h 30m Discussion Prompt: Lights on! . Duration: 20 minutes 20 min Lesson 7.2 Function input and output Lesson 7.3 Variables and scope Lesson 7.4 Debugging techniques
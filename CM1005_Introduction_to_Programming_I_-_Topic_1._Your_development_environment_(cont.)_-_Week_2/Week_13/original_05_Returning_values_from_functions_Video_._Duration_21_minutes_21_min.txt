# Returning values from functions
Videoâ€¢
. Duration: 21 minutes
21 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/ACmeq/returning-values-from-functions

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key So functions can take inputs in the form of arguments but they can also output values. You've already been using functions which do this when you call max functions from the P5 library. For example, the min function, max, constrain, map, or random. All these functions return values based on their input arguments. We're going to have a look at how to do this now. So I've got a code example here and you can download this from the platform. I've got a function here called sayHello and what I want this function to do is to return a value and in this case, I'm going to return a string that says "Hello world". To do this, what I do is I use the return keyword that you've already been using. So all I do is I type here return and I'll put the string "Hello world". So let's try calling this function. I'm going to just try and call it in the setup function, and I'll just go console.log and I'll put sayHello. Now, when you call a function that returns a value, you could almost think of the function code being replaced with the value that it returns. So in effect, what I'm doing by calling sayHello here, is actually saying console.log the string, "Hello world". So let's give it a go. Now obviously, I can't see anything in the outputs, instead I have to look in the console and there we can see "Hello world". I can also try calling this function just by typing the name in the console. So I could put sayHello. I'll make sure I've got an open brackets and closed brackets and again, I got "Hello world" printed in the output. So let's use it now to draw the phrase "Hello world". So here in the draw function, I could go text(sayHello), and I'll put it in position, well let's put it in width divided by two, height divided by two. So roughly in the middle of the screen and if I close the console, you can see it says "Hello world" Now, I might make a function a little bit more complicated than that. So let's say we were return a random phrase. We're either going to return "Hello world" or "Goodbye world". So I'm going to write a conditional statement and say if random. So if I use random without any numbers, I get a value somewhere between zero and one. So if random is greater than 0.5, then return or cut and paste this into here, then we'll return "Hello world". But otherwise, we'll return "Goodbye world". So now, we have this more complex behavior inside our function. So let's try this out. So now you can see that my output is flickering between "Hello world" and "Goodbye world" because it's making a random choice every time. If I was to try this in the console and I said sayHello, I can't predict now the output. This time I run, it's "Goodbye world". If I run it again, it was "Goodbye world" but the third time it was "Hello world" and this will be different for you when you run the function. Let's try a more realistic example. We're going to look at collision detection as you might find in a game. So you can find this with example two, download it from the platform. Here you can see I have a setup draw function and in the draw function, I'm calling a third function called drawSpaceship. This takes two arguments. It takes us spaceship object which I've initialized here and it takes a Boolean value which tells you whether the spaceship has collided with something or not. So the moment I'm just passing through the spaceship as it is and I'm setting is collided to false and when I do that, you get a gray spaceship like this. So now, if I was to set is collided to true, you'd see how it looks when the spaceship has collided with something. You can see it shakes about an it's gone red. So that's how we'll know if our spaceship has collided. Now, I'm going to start by making a further function. In fact, I've put the skeleton for you here called checkCollision. So this is going to compare two points and it's going to see if they're close enough to have been considered as collided. So that will be within the distance that is described by the argument threshold. So if the objects have collided, then it's going to return true otherwise this function's going to return false. So first of all, I need to think about what point A and point B are here. Well, if point A was going to be my spaceship, it will be an object with an x and a y property. So we can assume that both of these will be objects with x and y properties and I'm going to use a dist function to work out the distance between these two points described by these objects. So I'm going to say var d equals dist, and I can put in point a.x, point a.y. If you remember the dist function then takes another two values which will be the second point coordinates. So I can go point b.x and point b.y. Now for the moment, what I'm going to do, is I'm just going to log this to the console. So I'll go to console.log d. So I can just check that these distances are what I want them to be. So I need to call this function and I'm going to call it from the draw function and I'm going to say put here checkCollision and I am going to put in as points a, I can just put in spaceship a. The point b, I need to pass in an object and I want to use to start off with the mouse position. So I'm going to make an object on the fly here. I'm going to put two curly braces and I can actually make these properties just here and write this without having to declare a variable name for it, mouseY. So there's my object and that's everything that I need. So now, I'm checking the distance between the mouse and the spaceship every time I run the draw loop. So let's have a look at the output in the console. If you've done this with me, you should see a list of numbers. I'll just move this across a bit and hopefully, if I clear this for a moment, you can see as I move my mouse, the numbers get smaller the closer I am to the spaceship and as I move them farther away, the numbers get larger. So everything is as we expected. So the next thing I need to do is pass in a thresholds. So I'm going to say that I think let's put in a 100 pixels. So if they add mouses within a 100 pixels, this function should return true. So let me try that. So I've got d which is my distance. So I could now say if d is less than threshold and now. I'm going to use the return keyword. I'm going to return true because that means that the object has collided. Otherwise, I'm going to return false and I'll stop console logging that now. Instead what I'll do is, I could console log the outputs of checkCollision. So I'll go console.log here and I put it in the whole function checkCollision in between the brackets and that will be replaced that whole function call with either true or false. So if I look at the code now, if I look at the output, it says false and then after a certain point, my mouse is close enough to the spaceship, that it's true. Now, the moment we're using a 100 pixels. So I took a guess but actually, we have a value for the radius of the spaceship. So I should use that value. So I could put here spaceship_a.radius. This would give us a much more accurate results and it would mean that if we changed our mind about the size of a spaceship later, that would also work. So now let's have a look. So true, false, true, false. So we can see that's working. Now, what I want to do, is I want to work with not one but two spaceships. So I'm going to create a second spaceship object now and I'm just going to do that with a lot of copying and pasting. So I'm going to copy spaceship_a, make spaceship_b, copy the object creation here and make spaceship_b. Here instead of passing this object I created on the fly with mouseX and mouseY, why I'm going to pass spaceship_b. Now, if you think about it, when the two spaceships are colliding, we need to use both of their radiuses because this one will have a width and this one will have a width, and we need to see when those widths overlap. So the way I do this is instead of just passing spaceship a.radius as the threshold, I pass spaceship a radius plus spaceship b.radius. This coast looking quite messy. So let me put it onto separate lines so that you can see it really clearly. So we've got insight console log that check collision function being cooled. The first two arguments of the two spaceships and then we pass it as a third argument which is the threshold, the two radiuses of the spaceships are they together. Now, when we do this, the final part we need to do is to draw the spaceship. So I'm going to draw both spaceships now. So I've got spaceship either. Let's copy this for spaceship B. At the moment, they're drawn on top of each other. So you can just about see that there are two spaceships drawn on top of each other here. The other thing we need to do is now actually use this check collision value. So instead of just console logging it, I will make a variable. We'll call it iscollided. Iscollided will be set, assigned to the output of check collision. So it will either be true or false. Then I can draw these using the iscollided variable like so. So now you'll see that both the spaceships are on top of each other, so they're obviously collided therefore they're appearing wobbling about. But say I change the position of spaceship B. So I'll make its position, X is 100. Well, that might do it actually. Now, you can see the two spaceships are spread apart so they're not collided. Maybe if I adds, let's experiments. So now they're next to each other and they're overlapping a bit and so they have that pattern. Now, there's a few more functions that I put in here for you. We've got a function called fly. Fly moves the spaceship around by its speed properties. Now, at the moment, we don't have speed properties for these spaceships. So I'm going to create some now and I'm going to use the random function to do that. So we've got spaceship A has to have a property called speed underscore X. I'm going to say that's random, somewhere between minus five and plus five. Also has a property called speed Y. So I'm just going to copy and paste and change the X to a Y to give it both of those properties. I now need to do the same thing for spaceship B. So I can copy both of these lines and go spaceship b.speed x, spaceship b.speed y minus five to plus five. If I look here, at the moment nothing's changed because I'm not using those values and I'm not calling the fly function. So what I'm going to do now is cool the fly function for each of the spaceships. So let's do this after we've drawn the spaceship. I'm going to call fly, and if you look back at the function, you will notice that it just takes a spaceship as the argument. So I'll go fly, spaceship A, and then fly. Well, let's just do fly spaceship A for a moment and have a look. If you solve spaceship A flew off, there it goes. We'll try it again. If it flies and they stopped colliding. I'm going to do fly spaceship B. Now, you should see the both fly off, in that case they flew off together. They nearly flew off together that time. That's I may really flew apart and you can see they stopped colliding. So I've got one more function to add service. What this function's going to do is it's going to reverse the direction of either of the spaceships when it flies off the edge of the screen. So if you scroll down in your example, you'll see the skeleton of it here is called get speed. You'll notice that this function returns a speed object. Really the main reason I'm doing this is just to show you that functions can also return complex things such as arrays and objects, as well as returning simple values such as strings and booleans. So what I'm going to do here is as reverses speed of a spaceship if it crosses the edge of the canvas. So I'm going to start with the x-dimension. So I'm going to say, if spaceship.x is less than zero, that tells me that the spaceship has blown off the left hand side of the screen. I can also say, I can put an all there and I can say if spaceship.x is greater than width, that means that the spaceship has gone off the right hand side of the screen. So I'm catching either of these conditions. When either of those things happen, I'm going to do something. Now, I said I'm going to return an object. So I need to do a bunch of other things as well. I need to make a speed object. I'm going to make this object, I'm going to call it speed, and it's going to have two properties. It's going to have an X property and a Y property. The X property is going to be equal to the speed of the spaceship. So it should be spaceship.speedx. The Y property should also be equal to the spaceships speed in the y-dimension side like spaceship.speed underscore Y. So now what we're going to do is we're going to modify that object. So I'm going to say speed.x and I need to do something to reverse this number. So if we think about this, if speed.x was say minus four and I multiplied it by minus one, it would become the value four. So that would essentially flip the sign without changing the size of the value. So it's still four, but instead of being negative four, it's plus four. If I was to have a positive number, say I had three and I multiply three by minus one, well I just get minus three and that would effectively flip the sign the other way, but again it wouldn't change the value. So multiplying by minus one is what I want to do here. So I can say speed x times equals minus one, and now I flipped the value. So the final thing I've got left to do is to return this object. So all I do is put return speed at the end. But nothing would have changed yet. So if I run my sketch, the spaceships will still fly off the screen and that's because I'm not using the get speed function. So what I need to do is I need to make an object. So I'll do it here. In fact I'll do it before I could vase. I'll say var s equals getspeed spaceship. Then I'll get the speed object. Then I can say spaceship.speed x equals s.x and spaceship.speed y equals s.y. So I've assigned those values over to my spaceship object. You might have seen, I'll run that code again. You might see that if the spaceship goes off the left or the right of the screen, it's bouncing. So all we've got left to do is implement this for the y-dimension. So I'm going to copy this code and I'm going to change all the axis for Y's in this copy of the code, and that will do it with. I just need to do one more thing there because I'm using width. So I should use heights instead. If I save that, you'll see now that my spaceships bounce around. If they cross over, at some point they'll crossover. There we go. They'll lights up and shake if they've collided. So that's how to return values from functions. Have a go yourself and see perhaps if you can expand on this example and make the spaceships do something else when they collide perhaps laser beams could come out of them or the gloss could crack or something else. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 7.1 Functions Lesson 7.2 Function input and output Video: Video Function arguments . Duration: 8 minutes 8 min Video: Video Recursive cloud . Duration: 10 minutes 10 min Video: Video Returning values from functions . Duration: 21 minutes 21 min Practice Assignment: Function I/O . Duration: 15 minutes 15 min Lesson 7.3 Variables and scope Lesson 7.4 Debugging techniques
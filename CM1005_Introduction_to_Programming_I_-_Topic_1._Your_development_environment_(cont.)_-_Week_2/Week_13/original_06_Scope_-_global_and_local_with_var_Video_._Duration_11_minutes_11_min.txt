# Scope - global and local with var
Videoâ€¢
. Duration: 11 minutes
11 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/2TcvQ/scope-global-and-local-with-var

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Now we know a bit about functions. We need to know about variable scope. This refers to where in our program, we can use the variables we create. At first, these ideas may seem like a limitation. But hopefully by the end of this video, you'll begin to see how they allow us to write more manageable and readable code. Variables in JavaScript can have either one of two levels of scope. Either global scope or local scope. Globally scoped variables are available in all parts of your program. They are created outside of any function, whereas locally scoped variables are only available in the function they are created in, and are recreated each time the function is called. Let's look at the code snippet in this slide. myGlobalVariable, created on the first line, is unsurprisingly a global variable, and the only one declared in this program. Even if the clue wasn't in its name, which of course, could be anything, we know it's a global because it has been created outside of any function. It isn't enclosed in the curly brackets, it exist in the white space outside. This means that it can be reassigned or used by any function. It also means that if a function updates the value, the value will persist run the whole program. Lets upgrade this program a little to actually do something. I can change the value of myGlobalVariable anywhere I like in the code. Here I'm doing it in the setup function. Changing the value of myGlobalVariable to a different string. I could do this in any of the functions I've written setup, draw, or myFunction. I've also added a call to myFunction. Then, in myFunction, I've added a console.log call that prints the value of myGlobalvariable. The output looks like this, printing the updated value of myGlobalVariable. Changes you make to your global variables persist throughout your program, the other variables in this program are all local variables. They are scoped to the function they are created in. This means that I can't access or change the values in other functions. In fact as soon as the function has run the variable disappears and it can no longer be accessed. Let's look at another sketch. I've updated my function to create a new variable. I've just called it x, and using a for loop I'm calling the function 10 times. Pause the video for a second, and see if you can work out the output. All right, this is what it looks like. Each time the function is called, we are creating a new variable called x, we printed to the console, add 10, and print it again. So the first time it's called, we print out one, add ten, and print out 11. The second time around we are creating a new variable called x setting its value to one printing it adding ten and outputting 11 and so on. Now let's change this around a bit. If I take variable x and make it a global, what do you think the output will be now? Take a second to work it out. Now the output is increasing with each call to my function because the value stored in x is global, the value is persisting between calls. The outputs are repeated because there are two calls to console.log in my function. Let's take a look at the kind of examples you might seen in your own code. So I've got a sketch that I've written already, which you can download from right next to this video, and this program has three new functions written in it. One called ellipseRow, one called triangleRow, and one called rectRow. So these are going to draw a row of shapes to the canvas. And we can take a look at how these work, let's just look at ellipseRow for now. They all basically do the same thing, they just change the shape, so ellipseRow takes one, two, three, four parameters, an x and a y which is going to be the coordinate that the first ellipse is drawn at. Size, so how big that ellipse is going to be. So I'm just using this for the weight and height so it's always going to be a circle. And also a number, so how many are we going to draw. And then within this function I've got a local variable called currentX which I'm setting to be equal to that value of x to start with. And then a for loop, and each time around this for loop, we are drawing out an ellipse, and then increasing that value of current x to where we want to draw the next ellipse along the row. So after I've drawn one ellipse, I'm going to increase that value by the size of the ellipse, one and a half times. So that I draw my ellipse, I've got a little gap of half the width and then the next ellipse long, and i do that for however many is specified for that number parameter. So I'll draw out a row. So if I was to change the ellipseRow call, here in draw, so I'm calling each of these functions in the draw function, I've got a color fill before I'm doing that. So we've got a nice purple color, and I am drawing an ellipse at 50, 50, and I'm drawing them with a size of 30, and I am drawing 12 of them. So we can just change this number value. Let's make that 10 and we can see two less ellipses on the output. Let's do the same for rectangles and the same for triangles. So ten of each, and I could also change it so rather than them all starting like soldiers in a line, let's make the rectRow start at 100 and let's make the triangleRow start at 150. Okay, so we can play with these ideas, move things around just by changing the parameters. So these are quite nice powerful level functions. If we take a look at rectRow, you can see that I've actually created a very similar function with all the same variable names that I've used before. So I've got the four parameters, x, y, size and number exactly the same. And I've got the current x variable with the same name. So even though these exist in the same program, they're going to be called different values because they're only going to persist whilst that function is being run. If I wanted to do this with global variables, I would probably do something a little bit like this. So if I create at the top here, so a global variable, outside of any of the functions. Let's call this currentXe for ellipse. And then if we set that value in draw, To be equal to fifty. And hey, we can even use that here. So currentXe. So we just then need to change the ellipseRow function. So where I've got currentX here, I'm just going to make this e. And I'm going to make this one e, and hopefully if I save this, the program looks exactly the same. So you may now be thinking well, why don't you just use global variable in the first place? It's easy to manage, I know where it is, I'm going to have to use it all the way through my program. Well actually using lots of global variables isn't a brilliant idea. It's not a brilliant idea for a couple of reasons. First of all, if I wanted to do this to all of my functions, I would have to create a currentXr for rectangles and a currentXt for triangles. So I'm going to be creating a lot of these values, but there's also another problem with this. So say I want to extend my program, and I want to have another row of ellipses beneath the row of triangles. So let's set another fill color. So let's do a slightly more brighter color. And let's do a row of ellipses. And I want this to start at the same point that my other ellipses started at, so they're going to be at the same x co-ordinate and the y is going to be 200, same size, same number. Right, lets run this and lets see what happens. So that's not quite what I'm expecting, what have I done? I've called ellipse rather than ellipseRow, that's why. There we go. So rather than my ellipses being at the same x coordinate as the first row. They're now all the way across the screen. So using this global variable, it's persisting at that number, when actually I want to go back to that original state and be able to use my function with a little bit more flexibility. So let's set this back, so we now don't have this global, So we'll set this to 50. Then we need to create currentX again, is equal to x. And remove the es from there. Okay, so that's not quite right. Let's see what's going on. I've still got currentXe here. So let's put that now to 50, we've still got another little mistake here and let's just see. Okay, yeah, so I got currentX = x in my for loop, it should just be up above there. Now, just say though, you had've wanted your ellipses to be drawn offset to the right like that, exactly as they were when we used the global variable. Before you reach out and create a new global variable, there is a better way around of doing this. What we can do, is if we create a return value for this function. And we make that return value currentX, and then when we do our first row of ellipses, if we set a variable to be that value of currentX. So if we say var, we'll call this previousX is equal to ellipseRow. That means that we're going to store that variant value of currentX. And the next time we run ellipseRow, we can just use previousX as the value for the x coordinate. So if we save that, then it will move the ellipses over to that previous location. In this video, we have gone over the concept of scope. The variables that we create in functions are local and only accessible in that function. Global variables don't belong to a function, so their value persists across the program. In general, you should refrain from using globals as much as possible. They tend to lead to code which isn't as modular, and where variable names become convoluted and hard to keep track of. There's normally a better way around. In our next lecture video we're going to look at another concept that describes how variables behave when they are being copied. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 7.1 Functions Lesson 7.2 Function input and output Lesson 7.3 Variables and scope Video: Video Scope - global and local with var . Duration: 11 minutes 11 min Video: Video Copying variables . Duration: 9 minutes 9 min Practice Assignment: Scope and copying variables . Duration: 15 minutes 15 min Lesson 7.4 Debugging techniques
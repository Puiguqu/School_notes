# The factory pattern
Videoâ€¢
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/p1Edo/the-factory-pattern

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key As the objects that you create become increasingly complicated, they can become quite cumbersome to create. This is particularly true when you need to create multiple objects which all have the same properties and methods. One solution for this problem is to use the factory pattern, and that's what we're going to look at in this video. So, I have some example code for us to work with, and you can download this and code along with me. Let's have a look at what it does first of all. So, on the screen, I have a single piece of frog spawn, and if I click the frog spawn, it turns into a tadpole and swims off the screen. So, let's have a look at the actual code. You can see that we have a tadpole objects, and it's got quite a few properties and a lot of methods here. Also, we have some method calls that happen in draw. So, we have a call to a method called update, and another one called draw, and the final thing we have is when the user presses the mouse, if the tadpole hasn't already hatched, we call a method called test click, and we pass in a vector which describes the mouse position on the screen. Okay. So, our aim is to take this single tadpole and convert it into hundreds of tadpoles. Now, you can imagine that if we were to do this just by copying and pasting all of this code into an array, it's going to become very very cumbersome. So, one way of dealing with this is to use the factory pattern. So, the first thing we need to do with the factory pattern is to create a function to create our tadpole. So, I'm going to make the function at the bottom, and I'm going to call it createTadpole. Okay. The next thing I need to do is to take all of this code that creates the tadpole, and I'm going to cut it from setup, and I'm going to put it in the createTadpole function. Okay. Now, I don't want to use this variable tadpole, I want to use a local variable. So, instead of putting tadpole here, I'm just going to say var t. I noticed that there's this method call to setup at the bottom of this function, so I need to replace tadpole here with t as well. Finally, I need to return this object from the function, so, I do return t at the bottom. Okay. So, in my setup function now, what I can do is I can say that tadpole equals createTadpole. If I look at the output from my sketch, I can see that I now have exactly the same results, but I've been using a factory pattern. Now, I want to develop this slightly further. I want to I add some position so that we can adjust the x and y position of the tadpole. So, I'm going to add to my function two arguments, one called x, and one called y. Instead of doing set-up with width and the height divided by two here for the center of the screen, I'm now just going to pass in x and y, and then I can set a random position for my tadpoles. So, I can say random zero to width, and random zero to height. If we look back at our code, now we can see that this time the tadpole's right at the bottom. If I refresh the screen it's going over here, and each time it will appear in a different place. Okay. So, we're nearly there. What I want to do now is for us to go from a single tadpole to hundreds of tadpoles. So, I'm going to first of all create a global variable called tadpoles, and I'm going to make that an array. Then I'm going to use a for-loop to populate that array with lots of these tadpole objects. So now, I go for var i equals zero, i is less than, let's say we're going to start with 200 tadpoles. We'll see how that looks. Instead of using this line of code, I'm going to cut and paste it into my for-loop, and I could say tadpoles.push, the output of createTadpole. Okay. I'm not quite done yet, because I need to convert the code here that dealt with just a single tadpole, and I need to do that for this as well. So, let's deal with the drawing first. I need to traverse the tadpoles array here. So, I say i is less than tadpoles.length, i plus plus; and I take this code and I pop it inside here. Instead of using just tadpole, I now use tadpoles at the index i for both of these. I'm nearly done, but I also need to deal with the mousePressed function as well. So, it's a similar thing. I need to traverse the array. So, I go for var i equals zero, i is less than tadpoles.length, i plus plus; and I put this code inside. Wherever it said tadpole, I now say tadpoles at the index i. Okay. So, I think we're done here. Let's have a look at our outputs and see whether it's working. So, there we can see lots of frog spawn, and let's try clicking on some, and you can see the tadpoles swimming around the pond. So, now it's your turn. See if you can do this. Perhaps you can adapt the behavior of the tadpoles forever, maybe try making them turn into frogs. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 10.1 The factory pattern Video: Video The factory pattern . Duration: 7 minutes 7 min Reading: Reading Code it from scratch: Robot factory . Duration: 1 hour 1h Discussion Prompt: Robot factory . Duration: 20 minutes 20 min Lesson 10.2 Constructor functions
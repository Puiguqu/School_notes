# Platforms
Videoâ€¢
. Duration: 17 minutes
17 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/0Hs92/platforms

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key [INTRO WITH NO AUDIO] > I'm going to show you how to add platforms to your game. So, I've got here a completed game project six and we're going to add some extra features to this. Which is going to allow us to have little platforms that the character can jump onto. So let's start by creating a new variable in our completed sketch six. So let's call this platforms. And in set up we Or just stop game even. We are going to set this platforms to be equal to the MK write. Now this is going to be a complicated object, so we're going to use the factory pattern that Simon showed you earlier in this topic What we'll do is we'll scroll right down to the bottom of our code. And we are going to create a new function. And it's going to be called create platforms. Now, we're going to need some parameters but we won't set those just yet. Let's start by creating a new variable. I'm just going to call this p. And this is going to be where we create out platform. And p is going to be an object. And it's going to need an x-coordinate. A y coordinate, our length. And we're also going to have a draw function. Okay, so We need to establish what these values are going to be. Now if I just put in magic numbers here, that's not going to be very useful for us because we want to have lots of different platforms in different places so we can parse these in as parameters so an x, a y, and a length. So x is going to be equal to X, Y equal to Y and length will be length. So I've forgotten all my comas, so let's put those in and then we're going to have have some code that's actually going to draw this thing out to the canvas. So let's have let's set a fill and let's just for debugging purposes. Let's just make it a purple platform. So we'll set our fill and then we are going to have a rectangle and this will be it the the other property so this DX. This.y and it's going to be this.length long and we'll just set it be. Let's set it to be 20 pixels high. That's going to be the outline of our platform, and when we've done this we'll want to return. So, back up in our Start Game function. If we scroll back up to that we can create our platform. Let's just try and find it. Here we go. So platforms is equal to the empty list. And let's do platforms.push. And we'll just create one for now. And it's going to be a create platforms. And we'll put it just at 100. 100, and we'll make it 200 long. So these are just numbers just to get us started, and just to see how things work. So let's save that. So we've made an error somewhere. Let's have a look at our inspector and see what we've done. So on line 514, I'm missing I'm missing a bracket so let's have a look for that. Line 514 all the way down here. 514 opp yet, so I've used a semicolon there when I should've just used a comma. And there we go. So everything's working but we haven't got our platform yet because we're not calling this draw function. So we want to add in to our draw function, so this is the main p five draw. Let's just scroll up to that, around the place that we're drawing our canyons and our collectibles. Let's do it, just that. Let's draw in our platform. So we're going to want to iterate over. The platforms right. We've only got one there at the moment, but we still want to set up this code for when we have lots of them. Platforms.length; i ++, then we are going to call draw, oops we're going to Platforms i.draw. There we go, so let's save and run that and we've got an error. I think that's just, that's just okay, that's just the socket connection, we don't need to worry about that. We have an ugly pink platform floating in the air, it's not in a great place so let's Let's change around some of these parameters when we created it. And let's make it a bit more organize. So at the moment that's at 100 100. We want it to be much closer to our floor. So if we use floor plus y- 100. Let's save that. There we go, that's a better position, I think. Let's move it away from our, Let's make it at 100 but let's only make it 100 across. So it's out of the way of that canyon. There we go. Okay, so the next thing we need to do, so if I run over to it, Nothing's going to happen when I try and jump on it. It's still Just a piece drawing, we haven't put in any code to check whether we've made contact with it. So let's scroll down to where we are creating this platform. And we can add here into our object that we're creating, Another function, and let's call this function checkContact. And checkContact's going to be a function, let's also pass to it our game character's x-coordinate and our game character's y-coordinate. And we're going to use these values to determine whether our lonely character is over the platform. Whether he's in the right X coordinates for it. So, we'll do that. We're just going to check for the X coordinate to begin with. So, if, game character, underscore, X So this is the game character that's local to this object, From the parameter. If gamecharacter.x is greater than this.x, But, it's less than this.x plus this.length, okay? And, to begin with, all we are going to do is I'm just going to check. Whether this is working by doing console.log, and we'll just say inline with platform. Okay so save that, we've made a little mistake somewhere. Let's just see what that is, line 521. I've forgotten a comma there, let's try that. There we go, So, again, we're probably not going to see anything happening yet because we haven't checked whether that function's been called. We need to find the location where we are going to call that function. Now this is a little bit tricky, but what we're going to look for is The piece of code that's telling us whether our character is falling or not. So let's see if we can find that. It's going to be above here, isn't it, in Draw. So. There, just around here. So what we're looking for here is whether the game character's y coordinate is above the floor. And we're going to make him fall and we'll set the isFalling flag to true so that we draw the right version of the character. So above here, let's check if our game character is under the platform. So we need to go through all of our platforms, so for(var i = 0; i <. Platforms). .length i++. So let's now check whether platforms.platformsi.checkContact. Now we want to give it to gain quote side this tell where it came in the whole of the gain rather than just on the screen we take a moment and we can just use the why so the gain. If we save and run that, let's have a look. So if I run over to the platform. Whoops, we've got an error there. Let's see what we've done. GC is not defined, so I've probably made a small error in my code down here. Let's have a look. Check canyon. Check flagpole on our platforms. Yeah. That should also be GC_x. There. All right, let's try that. Okay. So we can see now we're getting. Out, output saying that we are in line with our platform, and you'll notice that it's only doing it when our character is jumping. So when he is flat on the ground, it's not going to be outputting only when he's jumping. That's because we're calling that code within that if statement, when the character is above ground level. So okay, so this is telling us that our character's now in line with the platform, and that's good. But, we also want to know whether our character is off the ground and around the same height as the platform. So the best way to do this, let's lose this console.log. Or actually, let's leave it in for a minute. Let's leave it in. Let's create a variable. And we'll call this D. Now we don't need to use the whole distance function here. We can get away with being a little more straightforward, a little bit simpler. And say, it's going to be this.y minus The game characters, why? So if we take those things away from each other, okay. So what we want to check is if, D Is greater than or equal to zero. So he's going to be above the platform. And if D is less than five. So he's going to be above the platform, but not very much. And this should hopefully make sure that we can definitely detect if he's near to the platform. So let's put in that console.log again. [SOUND] And, let's just say [SOUND], on platform. [SOUND] So, if we save and run that, and let's get the little guy running. [SOUND] And, there you go. It's printing out on platform, but only just for the momentary second when I'm right above it. So that's pretty much our checkContact function written. Although what we want it to do rather than printing out to the console, we want it to return true if we found him on the platform. But if he isn't on the platform, Then we're going to return false. Okay, let's go back up to where we were calling this function. So, back up into draw. Let's find that. Almost there. Great, here we go. When we call this function, let's create outside of here an extra variable, and let's call this var isContact. Now let's set that equal to false. So the default position is that the character isn't in contact with the platform and in this for loop if we say, if is platform Platforms[i] .checkContact. This will return true if we have found the character. Now we can make this a little bit more explicit by putting in == true there. You don't actually need that, JavaScript will work it out. But let's say if that's true, so if we found him on the platform, let's make isContact Let's make that equal to true. And we can break out of our loop because we only need to detect if he's on one platform. And then we only want to Perform this piece of code, [SOUND] If its contact is equal to false. [SOUND] So, let's save and run that. And if I jump there, there we go, there's my character on the platform. And I can jump off the platform, and we're now no longer in contact. So he won't fall to the ground. Okay, so that's how you add the platform and you can just add additional ones if you scroll back up to the top. Okay to add one more platform all we have to do is do platforms.push, create platforms, 100, and then floorPos_y-100, in fact we probably want this one in a different place. So let's change this score now to be 500. And let's make this one 200 across. So if we save and run that, there we go, there are two platforms now. And I can jump up on this one and use it to get over my canyon just as easily as the other one. So because I went to the effort of putting in that factory method, it was really easy to add additional platform methods to the game. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 10.3 Game project 8: Enemies Reading: Reading Code editor: reminder about Visual Studio Code . Duration: 10 minutes 10 min Video: Video Platforms . Duration: 17 minutes 17 min Video: Video Creating enemies with constructor functions . Duration: 13 minutes 13 min Graded Assignment: Coursework 2.2 Game project submission [002] Submitted Reading: Reading Game project parts 1 - 6 . Duration: 10 minutes 10 min Lesson 10.4 Completing Sleuth 10.5 Assessment preparation End-of-Module Survey
# Ellipse, rect, line, triangle and point
Videoâ€¢
. Duration: 5 minutes
5 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/NhMrI/ellipse-rect-line-triangle-and-point

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Hopefully by now you are completely bored with drawing rectangles. So in this video, we're going to look at some different shapes. So I've got a sketch here which you can download right below this video. In it, if you run it with live preview, you should be able to see some circles, an ellipse, a line, and a triangle. So we will skip over the rectangle for now. Hopefully, you are comfortable with how that works, and let's look at an ellipse. The ellipse command is made up of four parts just like the rectangle command. But this time, rather than the x and y coordinate being the top-left corner, it's the center of the circle. That provides us with the x and the y. The width and the height is the same, it's the total diameter. So with a circle, those two values will be the same. So if we change the height of that ellipse, it's going to make it squished, and oblique that way, and if we change the width, it's going to squish in, and make it long and thin and tall. If we have a look at this in code, you can see here I've got two ellipses. The first one is a circle, as you see the width and the height of the same, and that's drawing this one down here in the bottom left, and an ellipse up here, which is stretched out lengthwise, so it has a longer width than it has height. Onto our next shape, and that's a line. This is the command to draw a line, and it's got four arguments. This is two pairs of x and y coordinates. So the first x and y coordinate x1 and y1, are for end of the line, and the second pair x2, and y2 are for the other end of the line. If you think about it you can put these at either end, it doesn't matter which ones first or which ones last, you're always going to get a line between those two points. Back to our code, and let's look at the line command. You can see here that the two x-coordinates, so x1 is 250, and x2 is 250. So that means that across the screen, both points are going to be aligned. So this is going to give us a nice long vertical line right down the screen. If we would change it round. So let's make 50, 250, 450, and 250. We save that. Now we get a horizontal line right across the center of the screen, because those two y-coordinates are the same. If we wanted to make the line diagonal, then we wouldn't have that symmetry between the x and the y-coordinates. So our final shape for today is the triangle. This is made up of three pairs of coordinates, one for each corner of the triangle. So the first pair are x1, and y1, then x2, and y2, and then finally x3, and y3. The great thing about a triangle is, is it doesn't matter which order we put these in, we can cycle them round and we will still get exactly the same triangle. As well as switching around the coordinates, using this method we can also draw any type of triangle that we want. Whether that's a right-angle triangle, or an irregular triangle. Back in the code, we can see how this triangle command works, and it's the word triangle, followed by the six arguments for the three pairs of coordinates. Okay. We've got one last shape on this. We've got a point. Now, you probably can't see the point on here, but it is there. So what can we do to make this a bit clearer? Well, P5 also gives us a stroke weight command. So just before I draw that point, if I type in stroke weight, and then enter a weight in pixels, let say five, hopefully that will make our point nice and visible. Let's do that. Well, we can see that the point has got nice and big, but it's also made all the other strokes of all the other shapes quite big. That wasn't what we wanted. So we need to change it back down to a stroke weight of one. So right after the point command, go stroke weight one, and that's changed it back. Now, you may be thinking that hang on point was the last thing that we drew to the canvas in the draw function. So why is it drawing all the others with this heavy stroke weight? It's because drawer has been code over and over again. So even though stroke weight was being set on line 19 right down the bottom, the next time the draw function is code, that stroke weight is still valid. So P5 retains that state. So it's only when I've set the stroke weight back down to one, even though it's right at the end of draw, the next drawing commands for rectangle, that stroke weight possessed them. Okay. Now you go away and have a play with these different shapes, change rounds on the values, and draw some of your own. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 2.1 Drawing functions Video: Video RGB (red, green and blue) colours . Duration: 8 minutes 8 min Practice Assignment: RGB colours . Duration: 3 minutes 3 min Video: Video Fill, stroke, noFill . Duration: 7 minutes 7 min Video: Video Setup, draw and programme flow . Duration: 3 minutes 3 min Practice Assignment: Setup, draw and programme flow . Duration: 30 minutes 30 min Video: Video Ellipse, rect, line, triangle and point . Duration: 5 minutes 5 min Practice Assignment: Ellipse, rect, line, triangle and point . Duration: 30 minutes 30 min Reading: Reading Programming exercise 3. Hack it: Robot parade . Duration: 30 minutes 30 min Discussion Prompt: Hack it: Robot parade . Duration: 20 minutes 20 min Reading: Reading Programming exercise 4. Code it from scratch: Kandinsky . Duration: 1 hour 1h Discussion Prompt: Kandinsky: your abstract master . Duration: 20 minutes 20 min Reading: Reading Teach it to yourself . Duration: 30 minutes 30 min Lesson 2.2: The console and debugging
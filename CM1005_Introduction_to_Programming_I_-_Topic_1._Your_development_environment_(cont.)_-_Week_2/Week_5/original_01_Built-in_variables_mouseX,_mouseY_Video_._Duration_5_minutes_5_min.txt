# Built-in variables: mouseX, mouseY
Videoâ€¢
. Duration: 5 minutes
5 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/gYFs5/built-in-variables-mousex-mousey

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Hi. In this video, we're going to introduce the concept of variables. So far, we have drawn our shapes using absolute values, is a fixed numbers that don't change. Now, this has been find they are simple drawing, but now we want to start adding animations and interactions to our program. We don't necessarily know what these values will be before we execute our program. For example, the mouse's cursor, its position on the screen. P5.js provides us with mutual place holders that we can use no code, there'll be substituted for the actual values when it's run. For the cursor, there's mouseX that provides the mouse's x-coordinate across the canvas, and the mouseY, the y-coordinate, how far down is the canvas. Now, I'm going to show you an example of mouseX and mouseY working in code. So if you download the sketch that is just beneath this video and run it, you will see hopefully a back background with a white ellipse in the center. What we want to do is change this, so the circle is going to follow our mouse around the screen. So if I change the x-coordinates to be mouseX, and it's written like this with a mouse with a small n and a big X, and the y-coordinate with mouseY and save that, and go back to the live preview window. Thankfully now, yeah the little white spot is following our mouse's cursor. One thing you'll notice in this sketch is that every frame, I am redrawing the background and setting it to zero, zero, zero, or black. If this line wasn't here or if it was in the setup of the sketch, so I've cut it from there and put it in here. So you think that should be fine because I'm setting my background initially, and I don't want that background to change. But if I save and run this, you'll see that we actually get some slightly different behavior and not what we wanted. That's because we're using that background as to in effect clear the screen between each new iteration withdrawal. These placeholders are called variables, and you can think of these as areas in the computer's memory that is saving and storing little pieces of information. Whenever we want to use the mouseX coordinate, if we call that, p5 will know how to replace it with the actual value that's at that moment. We're going to go back to our original template and do something different with it and look at another pair of variables that p5 provides us with, width and height. Sometimes it might be useful for us to know exactly what the width and the height of the canvas is. So here, if I wanted to make this spot rather than being just 100 pixels by 100 pixels, I want it to be the whole take up, the whole canvas. So it'll be across the whole width and whole height. If I change that 100 to width and the second one to height, then p5 then should replace those values with 600 and 600. So if I click "Save," there we go and we now have a circle that's taking up the whole of the canvas area. If I change the size of the canvas to 800 by 800, and we change this middle point to 400 by 400, then yes, we can see again that it's taking up the whole of that canvas area without changing the width and the heights values. We can make this a little bit better, and what you haven't seen arithmetic yet properly, if I change this to width, width divided by two and height divided by two, so the forward slash command in your programs means to divide. So if we take the width and we divide it by two, and the height and divide that by two, and hopefully this will be in the same place when we rerun the sketch, there we go. Then if I change the canvas size back to 600, save it, then that circle is still in the same place and filling the whole screen. So, we've seen using the mouseX and the mouseY, and as a place holder for the cursor, and we've seen the canvas width and height. But the real power of variables comes in when we can make our own. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 3.1 Interaction with built in variables and events Video: Video Built-in variables: mouseX, mouseY . Duration: 5 minutes 5 min Video: Video Built-in events: mousePressed, keyPressed . Duration: 3 minutes 3 min Practice Assignment: Built-in variables: mouseX, mouseY and events . Duration: 30 minutes 30 min Reading: Reading Programming exercise 6. Code it from scratch: Drawing app . Duration: 1 hour 1h Discussion Prompt: Code it from scratch: Drawing app . Duration: 20 minutes 20 min Lesson 3.2: User-defined variables and objects Lesson 3.3: Working with variables
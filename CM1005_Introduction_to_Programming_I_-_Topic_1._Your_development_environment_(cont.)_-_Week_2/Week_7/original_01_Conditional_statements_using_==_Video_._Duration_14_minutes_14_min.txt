# Conditional statements using ==
Videoâ€¢
. Duration: 14 minutes
14 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/hXeoQ/conditional-statements-using

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key The Jacquard loom, which you can see behind me is important in the history of computing because it's one of the first programmable machines. It was used to mass produce intricately woven textiles. Now, so far, our programs have not been much more advanced than a Jacquard loom. They can draw the same image many times on demand. They may even have adjustable elements, but they can't make decisions for themselves. They have no internal logic. They're still dumb machines no smarter than your average lawnmower. So, in this topic, we're going to learn how to make our programs a little bit more intelligent. We're going to write programs that can take decisions. To do this, we're going to use the conditional statements. So, this is the basic syntax of a conditional statement. Between the round parentheses is where the condition goes, and the condition is something that can either be true or false. Between the curly braces is where the action goes. So, if the condition is true then the action happens otherwise, nothing happens. So, conditions can be things like, "Is the weather hot?", "My shirts is green", "My age is 39", "There's no coffee left in the cupboard". So, the thing that these all have in common is that they're true or false statements. So, "The weather is hot", so that's true. "My shirt isn't green", so that's false. "My age is 39", so that's true. "There's no coffee left in the cupboard", actually there's plenty of coffee. So, that's false. So then, the actions can be pretty much anything that you want, but they normally relate to the condition somehow. So, actions could be, "Drink some water because it's hot", or "Wear blue trousers to go with your green shirt", or "Plan a 40th birthday party" or "Just buy some more coffee". Now, to make conditional statements in code, we need to use the equal to operator, and this is what it looks like. It's two equals signs next to each other. The way it works in code is but it's simply checks wherever one thing equals another thing. So, in this code here, we have variable name and it's been set to Simon and the condition checks whether name equals the string Simon, and if it does it's going to print that to the console. So, here's our condition and here is our action. Okay. Let's have a look at that actually in code. So, here I have the code example which we can now play with, you can also download this from the platform. So, as we can see, there's no commands that do any drawing, so we're going to have to check the console in order to see the output. So, I'm going to run it right away, and I'll open up the console and sure enough we can see that it says, "Hello Simon". So, if we have a look here, we have a condition that it's checking to see if name is equal to Simon. We set name to Simon here and therefore it prints, "Hello Simon". So, we could do a little experiment. We could change this to something that isn't Simon. So, how about if we change it to Sabina. If we look back at our output, now we see that there is no output and that's because when we get to this conditional test here it goes, "Does name equal Simon?" No, it's Sabina. So, this is going to be false. So, this action won't happen. Okay. So, that's a very simple example. I've got a more sophisticated example to show you now and you can download this again from the platform and code along with me. So, we have a bomb diffuser game and we're going to be working on this a little bit in this series of videos. So, I'm going to open that in brackets, and the first thing I'm going to do is I'm going to run the games and see what we've got. So, here we can see we've got our shaking bomb with a fuse that's lit there, and a lot of writing and it's quite clear that this seems to be the entire writing for the game. So, we don't really want all of this writing to appear at the same time. So, in order to do this, this is where we're going to use some conditional statements. But first, let's actually just look at the code and see what it's doing. So, we have a bunch of global variables declared here. These ones are for where the bomb appears and the size of the bomb. This one is for the fuse, and we have a bit of setup code, but also initializes those variables. Then you can see usefully we've got things commented up here. We can see that this is where we're adding some random amounts to the center position of the bomb which is what's creating this wobble. Here is where we're drawing the fuse, we're drawing the bomb, we're drawing the flame, and then right at the bottom we've got all the game texts drawn. We have an empty event there key pressed which we'll use in a moment. So, what we want to do is we want to create some game states here, and then we want different graphics to appear according to which game state we're in. So, if we think about it, we should have a pregame state. We should have a playing the game state and one for if we've won the game and one for if we've lost the game. So, that's four game states. The way I'm going do this is I'm going to create a global variable called game state. I'm going to use numbers here. So, what I'm going to do is I'm going to initialize game state as zero. So, zero is the pregame, we'll call it. So, we need to think about what we want to appear in the pregame. So, in the pregame, we want to press any key to start. So, I'm going to go down to the text, and I'm going to create a conditional statement here. So, I'm going to go if gameState equals equals zero. So, bats for test, all we in the pre-game. Then what's the action going to be? Well, the action is going to be "Press any key to start." At the moment, we won't really see any difference because we haven't written any other conditional statements, and yes, we're in the pre-game. So, if we want to test this, there's a quite neat way of doing this. I now have a variable called gameState which I can check in the console. So, by just type gameState, you can see I get the output zero. So, I can now change this. I could make gameState equal to one. So, if gameState is equal to one, which will be playing the game, you can see the bat text has now disappeared. If I set it back to zero, it reappears. So, in gameState one, we'll want this bomb to be shaking like this. But we won't want it to shake at any other time, so we won't want it to shake in the pre-game or after you've won or lost. So, here, I can also add some conditional statements to make this happen. So, this is the bit that wobbles the bomb, and I only want it to happen if it's gameState one. So, I'm going to type another conditional statement. If gameState equals equals one, then we shake the bomb. So, I'm just going to cut and paste that into there and also make sure that my indentations are good. So, now we can see we're in gameState zero, and the bomb isn't shaking. If I set it to gameState one, the bomb starts shaking. The other thing that should only appear in gameState one is this flame on the fuse. So, let's have a look at where that happens in the code. Here we are, draw the flame. So, I can do the same thing here. If gameState equals equals one. I've got my action there, so I'm just going to carefully cut and paste that into the action. We have a few problems with indentation. So, I'll fix that as well. That looks good. So, let's test it again. So, now we can see there's no flame. I set gameState to one, and the bomb started shaking, and the flame is lit. The other thing that we only want to appear in gameState one is this instruction, "Press a key to defuse the bomb." So, I'm going to go down here and add one more conditional statement. If gameState equals equals one, that's when we draw this text. So now, our game is starting to look like it makes sense. We press any key to start. When we start the game, we get the instructions. So, the last two bits that we need to deal with are this "Game over" and "You won" text. So, Game over will be gameStates two. So, that's when you've lost the game. So, I'm going to put that here. If gameState equals equals two, that's when we do Game over. Great! So, now, we're almost there. I'm just going to deal with the condition "You won." So, then that's gameState three. If gameState equals equals three, we print you one. So now, if I just show you all the different states. We've got zero, that's the pre-game, we set it to one, and we're playing the game. We set it to two if as if we lost the game, and we set it to three if we won the game. So, we have that done, but what I also want to do is start looking at actually how to change the gameState in the program. So, what I'm going to do is I'm going to write a series of conditional statements in key pressed to flip through the gameStates. So, I'm going to say, when you press a key, If gameStates equals zero, then gameState should equal one. If gameState equals one, then gameStates will equal two. We're just going to assume for the moment that you always lose the game. If gameState equals equals two, then we're going to go back to the start of it, starts of the game, gameState equals zero. We can also do one for gameState free here as well. Now, there's actually a problem with this. We'll try it out, but you'll see it might not behave as we expected. So here we are. I'm going to press any key to start. Whoops, I'll select that. It doesn't seem to work. But actually, something is happening. Let me talk you through it. I press the key. Well, gameState equals zero. So, okay, I'll set gameState equal one. And then it said gameState equals one. Yes, it does, so I'll set gameState to two. Then it went well, gameState does equal two, so I'll set gameState back to zero. There we go. We've just gone through this whole loop all in one go, and we never saw any change. So, this is obviously not what we want. This isn't a mistake was quite easy to make with conditional statements. So, there's quite a few ways of solving this. I am going to show you one for the moment, and it's a really simple one. We're going to make another variable and I'm going to call it newStates. What I'm going to do is instead of setting gameState in each of these cases, I'm going to set newStates. There we are, newStates, newStates, newStates and one more. Then right at the end of my key pressed events, I'm just going to save that gameState now equals whatever newState had become. This means that the actions here don't trigger anything to do with the following conditions. So, it's just a safe way to change variables. So, it's a good rule of thumb. You shouldn't really change in a series of conditional statements, the variable that you're actually testing. So, if we try this out now, we should find that it works. So, I'm going to press any key to start. Brilliant. I'm going to press any key to defuse the bomb, and then it's game over. So, that's it. Have a play with the code yourself. Make sure that you understand it before moving onto the next video. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 4.1 Conditional logic Video: Video Conditional statements using == . Duration: 14 minutes 14 min Video: Video Conditional statements using != . Duration: 8 minutes 8 min Practice Assignment: Conditional statements using == . Duration: 15 minutes 15 min Video: Video Conditional statements using Else and ElseIf . Duration: 12 minutes 12 min Practice Assignment: Conditional statements using Else and Else If . Duration: 15 minutes 15 min Video: Video && and II . Duration: 13 minutes 13 min Practice Assignment: && and II . Duration: 15 minutes 15 min Reading: Reading Programming exercise 9. Hack it: Bouncing robots . Duration: 30 minutes 30 min Discussion Prompt: Hack it: Bouncing robots . Duration: 20 minutes 20 min Lesson 4.2: Conditionals with types Lesson 4.3: Debugging techniques
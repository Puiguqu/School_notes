# Webinar on graphs
Videoâ€¢
. Duration: 1 hour 24 minutes
1h 24m

URL: https://www.coursera.org/learn/uol-discrete-mathematics/lecture/7ys5z/webinar-on-graphs

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Morning everyone. What I'll try to do today is give you a summary of the topic on graphs. Then I'll take some questions, I'll try to answer them, and later on, will say something about the topic on today's as well. First, we start just a definition of graph. What is a graph? Graph are just a discrete structure which contains some nodes or vertices and edges or links that links those vertices. Graph is made up of set of vertices and set of edges that actually linking those vertices or connecting the vertices. We can look at the graph as an ordered triplet of G, and it has got a set of vertices V and a set of edges connecting those vertices, which is E, so that is the general definition of a graph. V is a set of nodes or vertices which you've already know, and E is a set of edges or links or lines or connections that connect those vertices. For example, here, if you look at this graph, this graph has got six vertices from V_1 to V_6 and the links as well from e_1, e_2 to e_7, that links those vertices or edges, or we call them connections or whatever. Set V contain all the vertices v_1 to v_6 and set e containing all the edges, all the connections from e_1 to e_7. V_1 and V_2 are endpoints of e_1. If I look at V_1 and V_2 are endpoints of this edge e_1, we say that V_1 and V_2 are adjacent. I'll start with some terminology that we have looked before. The edges e_1 and e_7, all share the same vertex V_1, so we say that e_1 and e_7 are also adjacent, the edge e_1 and e_7 are also adjacent. Same for e_6 and e_7, or e_6 and e_1,or e_6 and e_2, those edges are adjacent. The vertex V_2 is endpoint of the edge e_1, so V_2 is an endpoint of this edge, and we say that V_2 and edge e_1 are incident. A vertex and an edge are incident. Then we talk about loops and parallel edges. Sometime you may have two links, two edges that link two consecutive vertices, these are called parallel edges, and sometimes you might have a vertex that is linked to itself by this edge that is called a loop. What we've looked so far is this graph here, they are all undirected graphs. It means those edges or those links have no directions, means they have no directions, means you can go, for example, from V_6 to V_4, and you can go from V_4 to V_6. This is an undirected graph which allow you to go any way you like on the edge. But a directed graph, or called a digraph is just an edge with direction. For example, if we can add edges to this graph, then this edge now has got a direction, means you can only go from V_4 to V_6, and here you can only go from V_4 to V_5. You can't go this way because the edge has got a direction. These are called digraphs or directed graphs, where the edges has got a direction. That is just a definition of what a digraph is or a directed graph. Then we talked about some terminology, we talked about walks, we talked about paths in a graph, we talk about Hamiltonian paths, we talk about Eulerian paths, and all that. Then we'll just visit that very quickly, then we move on. What is a walk? A walk is a sequence of vertices and edges of a graph where vertices and edges can be repeated. I repeat, vertices and edges can be repeated in a walk. For example, if you go to here. You go from e_1 to e_2, then you'll go back to to v_2 again, and you go back to e_6, so e_2 is repeated, v_2 is repeated, this is a walk. Not necessarily they have to be repeated, but you're allowed to repeat edges and vertices in a walk. Then, we talked about what is a trail. A trail is a walk which no edge is repeated, means you can repeat vertices, but you cannot repeat edges. That is a trail. For example, if I look at this one here, you can go from e_1, go to e_2, go to e_3, and go to e_5, and come back to v_2. This is a trail because no edge is repeated. However, the vertex of v_2, you'll pass the v_2 more than once, so this is a trail, which no edge is repeated, but you can repeat vertices. A circuit is just a closed trial. You've already seen this. I'm just going fast and if you have any questions, I can answer it at the same time. A circuit is just a closed trial. If I look at this one, for example, if I go from e_7, e_6, e_8, e_3, e_2, then e_1. This is a close trial because no edge is repeated and it's closed. It's just a trail which is closed, that's what we call a circuit. , we talk about a path. A path is a trail in which neither vertices nor edges are repeated. You're not allowed to repeat vertices, and you're not allowed to repeat edges. If I look at this graph here, this is not a path here. If I go from here to here to v_3, then come back, then go to v_6, then it's not a trail. If I go e_1 to e_2, come back to e_2, then go e_6, this is not a trial because here you are repeating an edge, and also you are repeating a vertex. However, if I go to here, I go e_1, e_2, e_3 and e_4 this is a path because no edge and vertex is repeated. It's a path of a land fork because of that 1, 2, 3, 4. So now we know the difference between walk and the path, which is really what we need to know. Then we talk about a cycle. What's a cycle? It just a closed path really. What a cycle is, it's just a path which is closed. For example, here this is a cycle of a length three. It's a path and it's closed. Then we talked about Eulerian path. Eulerian path in a graph is a path that uses each edge in the graph, precisely once. A path is called a Euler if it uses each edge in the whole graph exactly once. With this type of graphs if they have Eulerian path, we can call them traversable graphs as well. If I look at this graph here, if I start from e_2, then I go to e_4, then I go to e_6, then I go to e_7, then I go to e_5, then I go to e_3, then I go to e_1. You can see that I've used all the edges in this graph exactly once, and this is called an Eulerian path because all the edges in the graph have been used exactly once. For example, we look at this graph here, I can go from here, for example, one edge, second edge. If you go from here really, one edge, second, third, fourth, and fifth. You can traverse all the edges of this graph exactly once. This is a Hamiltonian. Eulerian path then we talk about Hamiltonian path. A Hamiltonian path is a path that uses each vertex once. What we said here, an Eulerian path uses each edge exactly once, a Hamiltonian path uses each vertex exactly once. For example, this is a Hamiltonian path using this vertex. This path here, second vertex, third vertex, fourth vertex, and the fifth vertex. Such paths that uses each vertex once are called traceable paths. Then I'll finish now with some terminology that we've used. Now we talk about another way of representing a graph. So far, what we have done is a graph is a set of vertices and a set of edges. Now we talk about another way of representing a graph is with it's degree sequence. Let's talk about undirected graphs first. The degree of a vertex v is the number of edges incident to it. A loop contributes twice to the degree. This is all the things we will be using. An isolated vertex has got a degree zero. For example, if I look at this graph here, this is an undirected graph. This vertex here has got a degree 4 because there is one edge here, another edge in here, and a loop which is counted twice because you can go this way, and you can go the other way back. The degree of that vertex is four. The degree of this vertex, v_2 is two, so two edges incident to this vertex. The degree here is four, the v_3 is four: 1, 2, 3, 4, and here the degree is three: 1, 2, 3. The degree here is one, and here v_6 has got the degree zero. We now know how to work out the degree of each vertex. Now, we talk about directed graphs. How do we work out the degree of each vertex? Because in the directed graph, the edges has got directions. The edges have directions, so we will talk about the in-degree and the out-degree. The in-degree is the number of edges for which v is the terminal vertex and the out-degree is the number of edges for which v is the initial vertex. An example. The degree of a vertex is the sum of both out-degree of the vertex plus the in-degree of the vertex. Let's look at this graph now. It's directed graph, so all the edges has got a direction. It's exactly the same graph that we've seen before that we've added some directions to the edges to make it a directed graph. I look here. If you look at v_1, which is this one, the in-degree, how many vertices are coming to v_1? There is 1, and the loop is coming to itself, this is two. So in-degree is two. How many vertices are leaving? There is one, and the loop as well is leaving the vertex v_2, so there are two. It's 2 plus 2 is 4. The degree is 4. Now look at this v_2. How many in-degree? Is one, and out-degree is one. 1 plus 1 that's the degree of v_2. Same thing for v_3, the in-degree is two, the out-degree is two, the degree of the vertex v_3 is 4. v_4, the in-degree is one, which is only one coming to v_4 and the out-degree is two. So the degree of this vertex here is three. Then we move to v_5. The in-degree is one because one coming to v_5 and the out-degree is zero because now no edge is leaving v_5. Therefore, the degree of v_5 is one. Then we go to v_6. The in-degree is zero and the out-degree is zero, then the sum of the degree of v_6 is just zero. Now that we know how to work out the degree of each vertex, we can actually work out the degree sequence of a graph. Let's talk about undirected graph. The degree sequence is a monotonic nonincreasing sequence of a vertex of the degrees in all the graph G. For example, let's look at this. What it means that we start with the highest degree, and we write it down, a comma, the next highest till we go to the smallest degree. If I want to do a degree sequence of this graph. Then the degree of this vertex is V_4, I start with 4, comma, the next one is 3, comma, the next one is 2, 2, 1. This is now called a degree sequence of a graph, of this graph in this case. So far, we can represent graph by set of vertices and set of edges linking them or we can represent graph by its degree sequence. There are two ways, so far, that we have seen that we can represent a graph with. This degree sequence gave us a lot of information about the graph. There are some properties. The sum of the degree sequence of a graph is always even. If you take a degree sequence and you do the sum of all the numbers, and you find that it is an odd number, then it is impossible to construct a graph with that degree sequence. For example, if I see this graph here, the degree sequence of this graph is 4, 3, 3, 2, 1, 1. If I take the sum of all those elements here, it will give me 14. It's always even. The reason it's even because each edge in the graph is counted twice. If I look at this edge here, for example, it's counted for the degree of this vertex, and it's also counted for the degree of this vertex. Each edge is counted twice in a degree sequence. Therefore, the sum of the degrees of all the vertices in the graph, it has to give me an even number. The second property of the graph is the sum of the degree sequence is twice the number of edges in the graph. As I just said, in the degree sequence, each edge is counted twice, so if you sum all those numbers of the degree sequence, it should give you twice the number of edges in the graph. If I look at this, for example, the same graph, the sum of the degree sequence is 14, if I divide by two, I get seven and I count how many edges? 1, 2, 3, 4, 5, 6, 7. The degree sequence gives us also information about how many connections in this graph or how many edges in this graph. Just by summing the degrees sequence and dividing by two it gives you the number of connections or edges in the graph. Let's look at this exercise here. For example, you might be given if there's degree sequence and say, can you draw graph with this degree sequence or not? If I looked at the first one. [inaudible] one second. If I looked at the first one, the first one is 3, 2, 2, 1, and the second one is 3, 3, 2, 1. The first one, that's the degree sequence, and if you do three plus two, plus two plus one, this gives you what? An eight. Which is even. Then, yes, we can draw a graph with this degree sequence because the sum of the degree sequence is even. If we take, for example this, we can say three plus three plus two plus one is equal to what? It's nine. This is odd, then you can't. Impossible to construct a graph. For the sum of the degree sequence is odd, which is in this case nine, then it is impossible to construct a graph with this degree sequence. From the second, you can construct a disconnected graph. Now you can't. What is a disconnect? What do you mean? Because if we can construct a graph, what was the degree sequence? You had, 3, 3, 2, 1. Not with this degree sequence, no. Impossible to construct, or any type of graph with this degree sequence. The reason for it is, the sum of the degree sequence is 3 plus 2 plus 1, which is 9. If you want to construct a graph with this degree sequence, then if you can, then the number of edges will be 9/2, which is 4.5. What do we mean with 4.5 edges or 4.5 connection? What does it mean to say a half of an edge? Either there is a connection between two vertices, or there is none. You can't construct a graph, and if you can't construct a graph with this degree sequence, let me know. Did I answer your question, Kazz? If the sum of the degree sequence has to be always even, because each edge is counted twice. If we add all those numbers or each edge is count twice, it has to be an even number. In fact, if it's an odd number, then we can't construct a graph with it. Brilliant. We move on to the next question. Then we talk now that we know that we cannot represent a graph with it's degree sequence as well, and your degree sequence can give us some information about the number of edges and when other relation that links the degree sequence with the number of connections of the number of edges in the graph. Now, what we can do is, let's look at some special graphs. First we look at what is a simple graph? A simple graph is a graph without loops and without parallel edges. That's what a graph is said to be simple. If it has no loops and it has no parallel edges. If it has loops or parallel edges then it's not simple anymore. For example, this is a simple graph because it has no loops and it has no parallel edges. This is not simple graph because it has this, is a parallel edge in here and here it's not a simple graph because it has a loop in here. A graph is simple if it has no loops, and no parallel edges. With a graph, look at our properties of a simple graph. If a graph has got n vertices, and it is simple, then the degree of each vertex is at most equal to n minus 1. I can explain this in here. Suppose the graph has got n vertices. Let's start with a graph which has got four vertices. If a graph is simple, suppose this one has got the highest degree, and a graph is simple. It has how many other vertices to be connected to 1, 2, 3? The degree here, at most can be 3, which is 4 minus 1. If the degree of this vertex is four, then the fourth connection can only come from a loop or can come from a parallel edge. If a graph is simple with n vertices, then the degree of each vertex is at most n minus 1. In this case, we can't have a degree. For this case there are four vertices, then. The most degree that can be for a particular vertex is four minus one, which is three, because there is only three other vertices to be connected to. It's the same thing if we have n vertices. If we have n vertices, if this vertex has got the highest degree, let's see how many other vertices are laid out. Here is n minus 1 vertices. The whole graph has got n vertices. If this is the end vertex, this is n minus 1 vertex. N minus 1 plus this one is n vertex. Suppose this one has got the highest degree, it can be connected to all the other n minus 1, and that's its highest degree n minus 1. Any extra connection has to come from a loop or a parallel edge, which will make it a simple graph. We now know that a simple graph, that at most the degree of each vertex is n. For example, if I look at this one, it has got four vertices. This is simple. This degree is three. If I want to add one extra edge to make this one a degree of four for example out of the other loop or other parallel edge, which won't make it simple anymore. Now we know what a simple graph is. If we know what is simple graph, can we construct now a simple graph with the following degree sequence? Let's just write them, 4, 2, 2, 2, and 4, 3, 3, 2, 2. Can we construct a graph with this degree sequence? If I look at this, you can construct a graph with both of them. But is it simple? Yes, you can because first you look at the sum of the degree sequence and that is 4 plus 2 plus 2 plus 2, which will give you 10. Then, you can construct a graph that has got five edges. But can it be simple? Let's see if we can draw it. It has got four vertices. Let's assume this one has got a degree of four. This can be connected to this one, connect to this one, connect to this one, so where the fourth connection can come from? There are only three other vertices to be connected to. In this case, the other fourth connection can only come from a parallel edge or a loop. We can construct a graph with this one. However, we can't construct a simple graph. But with this one, again, the sum of the degree sequence is 4 plus 3 plus 3 plus 2 plus 2, which is 14, we can construct a graph and the number of edges is 7, which is 14 divided by 2. Then, it has got five vertices and the highest degree is four, which is five minus one. We can construct the simple graph with this vertex. It has five vertices. Let's see if we can construct this graph. Let's connect all of them once. They all have two, and what do we have? We have 4,3,3,2,2. It's 4,3,3, and 2,2. If I do this one, now I've got 4, I've got a 3, I've got a 3, I've got a 2, and I've got a 2. It's simple. I need simple. It's 4,3,3,2,2 and it's simple. We're answering that question, then we talk about regular graphs as well. [inaudible] , I don't understand what you mean with that question. What indicates of being closed graph? What do you mean? Okay, thank you. Now then we talked about a regular graph. A graph is called regular if all the vertices have the same degree. If all the vertices have the same degree, r, we call it a regular graph. For example, this is one-regular graph with two vertices, the degree 1,1. This is a two-regular graph with three vertices not two vertices 2,2,2 here. This is a two-regular graph with four vertices. That is 2,2,2,2. That's the degree sequence, and the same thing, three-regular graph with four vertices with degree 3,3,3,3. Then we talk about some properties. If you have r-regular graph with n vertices, then the degree sequence is r, r, r, n times, and the sum of the degree sequence, is just r plus r plus r plus r, n times, which is just r times n. The number of edges, which is just the sum of the degree sequence divide by two, which will be just r times n divide by two. If I look for example at this, this is a three-regular graph with six vertices. That's the degree sequence 3,3,3 six times. Thus, the sum of the degree sequence three times six, which is 18. The number of ages is 18 divide by two, which is nine. If I count those number of edges, I find nine: 1,2,3,4,5,6,7,8,9 edges. Then, can we construct a three-regular graph with four vertices? Yes, we can. Sometimes you get this question; can you construct a three-regular graph with four vertices? Tree regular-graph with four vertices. First thing you look at sum of the degree sequence. Is three times four, which is 12, then evened. Then the answer is, yes. That is your graph 3,3,3,3. The second one, can we construct a three-regular graph? Three-regular graph with five vertices. Sum of the degree sequence is, there will be 3 times 5, which is 15, which is odd. Then the answer is no, impossible. If the degree sequence is odd, then we can't construct a graph with that degree sequence. If the sum of degree sequence is odd, then we can't construct a graph. We can construct a graph with 3-regular graph with four vertices, but we can't construct the 3-regular graph with five vertices, because the sum of the degree sequence will be 3 times 5, which is 15, which is an odd number. We answered that question. Then we also talked about a complete graph. What is a complete graph? A complete graph is just a simple graph, it has to be simple and there is a direct connection between any two vertices. That's what a complete graph is. A graph is said to be complete if it's simple, means it has no loops, it has no parallel edges and also there is a link or an edge between any two vertices of the graph. You take any two vertices, you'll find a direct link between them. Then we looked an example. A complete graph with n vertices, we always refer to it as K, the letter K_n. K, complete and n stands for n vertices. That's the notation that we use to say a complete graph with n vertices. Now let's look, this is a complete graph with one vertex. Just one dot is simple and it's only one vertex. There's no other vertices to be connected to. That's a complete graph with two vertices. That's a complete graph with three vertices. If you take any two vertices, you'll find a link between, there is no loop, there is no parallel edge. That's a complete graph with four vertices. If you look it's simple and there is a direct connection between any two other vertices, complete graph with five vertices, complete graph with six vertices, complete graph with seven vertices, and a complete graph with eight vertices. You can see that there is a direct link between any two vertices. Now that we know what a complete graph is, we can look at some properties of a complete graph. A complete graph with n vertices n has the following properties. The degree of each vertex is n minus 1. If I look, for example, if I have a complete graph with, let's say four vertices, and it's simple, let's say this is V_1, V_2, V_3, V_4 and It's like a complete graph. K_4, let's call it K_4. This vertex has to be connected to this one, to this one, to this one. There are 4 minus 1 other vertices to be connected to for each vertex. This one will have a degree three, which is 4 minus 1. The same for this one will have to connect to this one, connect to this one. The degree is 4 minus 1. The same for this one, it has 4 minus 1, which is 3. The same for this one. It has 4 minus 1, which is 3. If we have K_n that each vertex has a degree n minus 1, and that stands property for all complete graphs. If we have n vertices and each vertex has degree n minus 1, then the sum of the degree is n minus 1 plus n minus 1 plus n minus 1 n times, which is just n times n minus 1. If the sum of the degree sequence is n times n minus 1, and we know that this value is also twice the number of edges in a graph, then the number of edges will be just n times n minus 1 divide by 2. Let me check, I've got a message Yeah. We're all. It doesn't really matter, but we use K. Now we know what the complete graph is, now we look at this. This is k_5, a complete graph with five vertices. If you look, there are five vertices. Each vertex has got degree four, which is 5 minus 1. The sum of the degree sequence each one has got Degree 4 is 5 times 5 minus 1, which is 20. The number of edges is 20 divided by 2 which is 10. If I count those edges I'll find exactly 10 connections. If we know that the graph is complete, then we know exactly the number of edges between that graph and the degree of each vertex and how those graphs, or all those vertices are connected to each other. Now we talked about some special graph, then we talked about the isomorphic graph. What do we mean by two graphs are isomorphic given a regular graph? Let me answer that question now. Let say I'm asking you a d-regular graph with five vertices. I hope I'm answering your question, if I understand what you saying. Let's say I've got a d-regular graph, a regular graph which has got five vertices, and each vertex has got a degree d. Let's find all the possible values of d. I want to keep it as simple as [inaudible]. I want to keep the graph as simple. I don't really want to make it not simple, otherwise, I'll have a lot of options. I want to find what are the possible values of d? You start from d is equal to 1. If d is equal to 1, what is the sum of the degree sequence? Sum of the degree sequence is 1 times 5, which is odd. D is equal to 1 is not a possibility. Then you start from d is equal to 2. What is sum of the degree sequence? 2 times 5, which is 10. Even, that's a possibility. Then you start from d is [inaudible] possible values of d. No, it doesn't have to be simple, I'm just doing it here. A regular graph is any graph where the degree of each vertex is the same. Let's now go, value is three. The sum of the degree sequence will be 3 times 5, which is odd, then the value of d is not possible. Let's now make the value four here. Sum of the degree sequence 4 times 5, which is 20, which is even, then the sum of a possibility. For d is equal to 5. Then some of the degree sequence will be 5 times 5, which is 25, which is odd. Then this is not a possibility. In this case, if you have an exercise like this, it's a d-regular graph with five vertices or seven vertices, find all the possible values of d for d lacking in some range. Sometime you get this type of questions. But you always look at the sum of the degree sequence to find out if it is possible to construct that graph or not. Did I answer your question Abderrahman? Let's go back to isomorphism now. Given two graphs, G_1 and G_2, we say though those two graphs are isomorphic, isomorphism means the same, they represent the same information, if there exist a bijection as a function. Again, a bijection is a function that is one-to-one and onto that takes a vertex from G_1 and map it to vertex in G_2, but which preserve the adjacency. Means if u and v is an edge in G_1, then f of u, f of v is an edge in E of G_2. Good luck. Now let's look at this graph, for example. These two graphs actually look the same to me. If I just move this vertex b_5 to here, then now the graphs will look the same. They only look different because of the position of the vertices. I can find a bijection of function, which is a bijective function that maps each vertex, I map a_1 to b_1, a_2 to b_2, a_3 to b_3, a_4 to b_4, a_5 to b_5. This function is a bijective and it preserve the adjacency of the graph. For example, if I look at these two graphs, they are all the same. They all have four vertices, degree two. They are all the same. It's just how we link them that looks different. How the positioning of the vertices and just the shape of the link. In this case the shape of the link, which is, so by [inaudible] the same thing for this graph. They are isomorphic. They are the same. Property of isomorphic graphs. Two graphs with different degree sequence, they are not isomorphic. If they have two different degree sequence like this one, is different, then we stop there. The two graphs are not isomorphic. Two graph with the same degree sequence aren't necessarily isomorphic. Look at this one. This graph here is an example. The degree sequence of this graph is 4,2,2,1,1,1,1. The same here 4,2,2,1,1,1,1. However, these graphs, although they have the same degree sequence, they are not isomorphic. The reason that they are not isomorphic is they don't respect the adjacency. For example, I can map this vertex to its equivalent vertex in this graph, this the only one that has got a degree four. It's equivalent in the other graph will be four, which would be this one. However, look at this one. The vertices that are adjacent to it, has got 2,2,1,1. However, this one, the neighbors has got 2,1,1,1. It means the adjacency is not respected. Yes, the adjacency is not respected. These two graphs, although they have the same degree sequence, they are not isomorphic because they don't respect the adjacency. Then we talked also about another way of representing a graph. We talked about representing a golf you using the adjacency matrix. Far we cannot present a graph with a set of vertices and set of edges. We can represent a graph with its degree sequence and now we can look at different way of representing a graph is with its adjacency matrix. So far we have seen that a graph can be represented using a set of vertices, set of edges, for example, this one set of edges and certainly can represent this graph. Let's look at what we call the edges or the graph can be represented by its adjacency list. I'll show you an example for this graph here, we might be given only this is called the Adjacency List. A is connected to B and is connected to C, B is connected to a, C and D, C is connected to A, B, D and E, D is connected to B, C, E, and E is connected to C and D. This is called the adjacency lists. Sometime you might be given just this adjacency list and say, draw the graph. Yes, and this is called the adjacency list. For example, you might be given this adjacency list. V is connected to V1, V2, and V3, and so on and draw the graph and you start by looking at V1 is connected to V1 which is a loop, V2 which is this and v3, which is this one, then we move to V2. V2 is connected to V1 which is already there, plus V4 and V5. Then we move to V3. V3 is connected to V1 and V2. V1 is already there. Then V4 is there. Then we move to V4. V4 is connected to V2, it's already there. V3, is already there then we add V5. Then, that's the graph V5 is connected to V2 and V4 which is already there, V2 and V4 and that's the graph. Given adjacency lists, we can build the degree to graph. You can draw the graph from adjacency lists. The other way that we can actually represent a graph is its adjacency matrix. Let's look at this graph here. Yes, Zhao, I will talk about in a minute. Yes, I will explain that. Thank you. Given this graph here, and I want to construct its adjacency list. I've got V1, V2, V3. Yes, there's a loop here. There is a loop here, there is two parallel edge here, and there is one edge between V1 and V3. Let's try to draw the adjacency. As I had put I've got three vertices. I put a matrix which is three by three matrix. Is there a link between V1 and V1? Yes, there is, that's one. Is there a link between V1 and V2? Yes, there is one. Is there a link between V1 and V3? Yes there is one. Then we move to V2. Is there a link between V2 and V1? Yes, there is, yes one. Is there a link between V2 and V2? Yes, there is one is a loop in V2 is there a link between V2 and V3? Yes, there are two. Then we put to there, then we move to V3. Is there a link between V3 and V1? Yes, there is one. Is there a link between V3 and V2? Yes, there are two and is there a link between V3 and V3, no, that makes a zero. If you look here, is each edge is actually counted twice. This one here is the same as this one. They refer to the same edge. This one here is the same as this one. They refer to the same edge. This two here refer to these two edges and these two here refer to the same two edges. Really, each edge in this adjacency matrix is counted twice apart from the one in the diagonal. Apart from the one in a diagonal. :03 As I just said, those refer to the same edge. The diagonal is the loops. Yes, they are the only one that are actually represented, their loops are actually counted once. What we can do, so these two represent the same, these two refer to the same edge, these here refer to the same edge. However, this one to this loop and this one refer to this loop here. They counted only once the loops are counted only once. What we can do is, make the loop two as well. Count the loop. Each loop give it two in adjacency matrix as well, because each edge is counted twice. This way, the adjacency matrix now is as follow, where each edge is counted twice. This loop is counted twice, that loop is counted twice, the V_1 and V_2 is counted twice. What we can do now, if you look at some properties this adjacency matrix, what can it give us? If I add all those numbers in the adjacency matrix, then it will give me twice the number of edges in a graph. :39 Again, if I add all those numbers, that will give me the sum of the degree sequence. :51 We have seen this before. If I look this, the sum of the degree sequence will be 12. If I do this 12 and I divide it by 2, I get 6, which is I've got six edges; 1, 2, 3, 4, 5, 6 edges. That matrix gives us as well the sum of the degree sequence. :27 Yes. After we multiply the diagonal by two, yes. Because each other edge is counted twice, then we need to multiply the diagonal by two so that we count the loops as well twice. :51 Did I answer your question, Constantine? :18 How did I get 4 plus 5? :33 All I'm doing is adding all those numbers here. :41 I add 2 plus 1 plus 1 is 4. :50 1 plus 2 plus 2 is 5 and 1 plus 2 plus 0 is 3. That's how I got them. :07 No. We count the loop twice in the graph as well. When we do the degree, then the degree of this vertex here is four because there is 1, 2 and we count the loop as two as well. :35 Does that make sense to you? :41 Tola? Okay. It's the same here again. We count the loop twice because 1, 2, 3, and 2 that will give us five. Yeah, it's an edge. here, it says this edge here, for example, is counted for the vertex of V_1 and is counted for the vertex of V_2. However, when we have a loop, we are talking about the same vertex. :19 Or from the beginning just when you have a loop, put two. When you have a loop in adjacency matrix, put the value of two for it. :35 What if we have a digraph which is a directed graph? If I have a digraph then the adjacency matrix now becomes only this. When we have a digraph, is there a link between V_1 and V_1? Yes, there is one. Is there a link between V_1 and V_2? No, there isn't. There is from V_2 and V_1, but there isn't a link from V_1 and V_2, then I have to put zero. Is there a link between V_1 and V_3? No. There is from V_3 and V_1, but it's not from V_1 to V_3. Then the adjacency matrix in this case will be this because each edge will be counted only once. Then this if you add now, because in a directed graph each edge is counted only once, so if you sum those numbers, they will give you exactly the number of edges in this graph. If I sum those because now each connection is counted only once, so therefore, if I add those numbers, they should give me exactly the number of edges it should, 1,2,3,4,5,6 edges. Just be careful if it's a directed graph or undirected graph. The last thing that we talked about graph, is we talked about Dijkstra's and we talked about weighted graphs. :17 Let's talk about weighted graphs, which is the last thing that I will be talking about today. A graph is called weighted graph if each edge is assigned a value. :56 Sometimes you might be given only the matrix. I think when we try to deal with the graphs, when we want to program and we cannot place on those graph by a matrix, and we can do a lot of manipulations with matrix, and that matrix is way of representing a graph. Is the same thing as we represent a graph with these degree sequence or we represent a graph with a sum of number of vertices and the set of edges. Then we can also describe or represent a graph with it adjacency matrix and that matrix can help us find a lot of information about the graph. Especially when you're programming you can use matrices a lot in graphs. Does that answer your question? :58 In a directed graph? Why I didn't multiply here because I used each edge only once here. When the graph is directed, before it was undirected graph. If undirected graph, I count this edge for v_1 and v_2. However, for directed graph, each edge is counted once only. For example this edge here, is there an edge from v_1 to v_2? No, because there is an edge from v_2 to v_1. From here, we look at this v_1 here, then we look, is there an edge from v_1 to v_1? Yes, there is, this one. Is there an edge from v_1 to v_2? No, there is no edge from v_1 to v_2, then it's zero. If it was undirected, then we will put one here. :06 Same thing for v_3, is there an edge from v_1 to v_3? No, there is no edge from v_1 to v_3. There is an edge from v_3 to v_1, but there is no connection that takes you from v_1 to v_3. Does it makes sense Tola? :35 When we talk about undirected graph, you can go either way. When your bid adjacency matrix, you are counting each edge twice. When the graph is directed, then you take the direction into account. If there is a link from v_1, you have to follow the directions. If the direction doesn't allow you to go that way, so you can't say that you can. That means here, for example, you can go from v_2 to _1 but you can't go from v_1 to v_2. :18 Let's move to weighted graphs. We say that weighted graph each edge has got some numerical value, which is the cost of that edge. Assume that edge is, for example, the weight is the distance between those nodes and we want to find the shortest path, say this is two kilometer, three kilometer, one kilometer, one kilometer, and we want to find the shortest paths to go from A to E. Weighted graphs is each edge has got some kind of a cost of what it cost to build that connection between those two vertices. Look at it as houses and that cost is how to link those houses like sewage, power, telephone line. That's the cost of getting that link from this house to this house, for example. That's what we call weighted graph. Each edge has got some weight or cost, but think of it as the distance between those vertices. :49 Once you have a graph with five vertices it's easy to see the shortest paths. But once you have a graph with 1,000 vertices, it's so difficult and each connection has got a cost. It's so difficult actually to find the shortest path between two vertices. :15 Dijkstra in 1956 introduced an algorithm which is called Dijkstra's algorithm to find the shortest path between nodes in a weighted graph. This is how Dijkstra's algorithm work. First, you have got this table. You put all of the vertices of this graph. This graph has got five vertices, so vertex A, B, C, D, and E. This column has got the shortest distance from A, and this is called a previous vertex. To get this shortest distance, what is the previous vertex? We're trying to find the shortest distance from A to all other vertices. Now we start visiting nodes by nodes. :23 This is a pseudocode of the algorithm. It doesn't matter if you don't understand pseudocode, but just to show you how it works. First, we initialize the distance from A. We are interested, and the distance from A. We initialize from A to A is zero, :47 from A to B is infinity. That's the largest it can be, from A to A is infinity. is undefined, we don't know. From A to C is infinity, we don't know again, previous vertex. Again from A to D is infinity. Zero from A to A we know, but to go from A to A is zero and infinity from A to any other vertex in the graph. What we do then we put a set of all vertices here, that we haven't visited yet then we'll start visiting them one-by-one. First, we'll go and visit A. Now that I visit A, what's the distance from A to C? Now it becomes two. Was zero A to A but A to C is two now. What's the distance from A to B? Is three. What's the previous vertex? Is A. Now I go and then A to B was infinity before I updated with two because two is less than infinity. :10 A to B becomes three, because the distance from A to B now is three and three is less than infinity, then I update this distance to three. How did I get to B? I get from A as the previous one, then I make this previous vertex is A. The same thing for C. A to C is two, which is less than infinity, then I update this distance A to C and the previous vertex is A. How did I get there? , A is visited I remove it from this unvisited set and that's what it gave me. , is I got one visit C. What did that give me? If I visit C, I have from A to C is still three, two, three. A to B, sorry, you can't go this way and the previous is C, and it will give you still three the same as before. A to D now it will give me A, 2, 1, so it will be three. I have to update the distance to D. A to E, it will be, 2 plus 5, and the previous is C. I go and update now. I don't need to update B because three we already have three, we'll find the new distance is three and I don't need to update it. What I need to update is the distance to D, which becomes three, was before infinity. It doesn't matter which way you go, you can go both ways. :08 Constantine, it doesn't matter which one, you do but you will always get the same thing, the shortest path. :19 What you get here is three and you update this by seven because seven is less than infinity. Now that we've and how did we get this distance? We get via C. The previous here will be C. The next thing is C is visited, we'll remove it from unvisited. We moved to B, :46 if the distance is B, so the distance to D now will be three plus two, which is five. Yeah, five is greater than three. Now I don't need to update this distance, I've already got a shorter distance here which is three, and the previous C, I don't need to update it. :12 Then B is visited. The next one we need to visit is D. We find is that D The next distance that I need to update this distance to E. Now it was before seven, remember to E, it was 7 and the previous is the vertex C. B now is if we come this way, A to C, to D to E, it will give us only six, six is less than seven that I update that table by the distance to E is six now, and the previous vertex is D not C, because if the previous vertex was C, it gives us the distance is five. Now D is visited. We remove it, and we go and visit E and it doesn't give us any update. It doesn't give us any other update. What we have now, the shortest from a to B is three, and the previous vertex is A. The shortest distance from A to C is two, and the previous vertex to get there is via A. The shortest distance from A to D is three, and the previous vertex is C, this is how to get to D. That one. The shortest distance from A to C is six. This is how you get to that , A, C, D, to get to E. :06 It doesn't matter which choice you make, what we're trying, we're trying to go from A, yeah, we're trying to find the shortest distance from the vertex A to other vertices. After A, I went to C, I can go to B if I want to, then C, then D, it doesn't really matter. Yeah, its just sometimes, if you went to B, you might have to do some more updates, it doesn't really matter which way you do. Does it make sense to you, Momita? :52 I'm only starting from A, then what I need to do is to go to the next one that are connected to the A. I can either go to B or C. Yeah, if I went to B, for example, it might give me a five to go to D, and when I go to C I have to update again because if I go previous C will be only three. It doesn't really matter. That's how you use Dijkstra's algorithm to find the shortest path. First, you initialize the distance to all the other vertices apart from the starting point to 0, all the others you initialize them at infinity. Then you start visiting node by node from the starting points. Each time you find a shorter distance, you update this table here, and you update the previous node. How did you get to that distance? What is the previous node that got you to that distance? By doing that, you, once you visit all the nodes, you will get the shortest path to any other vertices in this case, we get the shortest path from the vertex A to all other vertices. :20 Now we have like the shortest distance from A to E is this one, which will give us C. This is how we got there. We get to A to C to D than to E to give us the shortest distance. What I have done with you today is we revisited what is a graph, we revisited terminology of graph. We went back to the degree sequence of graph on its property. We then talk about presenting a graph using the adjacency matrix and what information does the adjacency matrix. Then we've talked a little bit about weighted graphs and how Dijkstra's algorithm is used to find the shortest path. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 7.2 Isomorphic graphs adjacency matrix 7.3 Extra resources Video: Video Webinar on graphs . Duration: 1 hour 24 minutes 1h 24m Reading: Reading Graph theory problem sheet . Duration: 10 minutes 10 min Reading: Reading Graph theory problem sheet solutions . Duration: 10 minutes 10 min
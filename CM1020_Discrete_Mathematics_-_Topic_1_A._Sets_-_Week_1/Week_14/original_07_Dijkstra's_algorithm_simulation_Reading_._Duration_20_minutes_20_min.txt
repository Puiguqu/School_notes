# Dijkstra's algorithm simulation
Reading•
. Duration: 20 minutes
20 min

URL: https://www.coursera.org/learn/uol-discrete-mathematics/supplement/XcN8d/dijkstras-algorithm-simulation

In the next exercise you will learn more about Dijkstra’s algorithm and how it can be applied to real case scenarios. In fact, you will be in charge of running Dijkstra’s algorithm step by step in order to find the shortest route between two stations of well-known underground networks. As you have already learnt, Dijkstra’s algorithm can be executed on weighted graphs. Therefore, we can use the same graph structure to model an underground network where each vertex represents a station, each edge represents a route between two stations and the distance in kilometres between two stations represents the cost or weight of that route: The Dijkstra’s algorithm simulation looks like this: At the bottom there is some help text that will guide you through what you should be doing at each stage: On the right there is the currently selected underground network (London in this case) represented as a weighted graph. Weights or costs represent real distances in kilometres between stations. This section also has a legend, which will help you to understand the graph better. You can see that the journey starts from Bond Street and ends at Charing Cross. You will be prompted to select a starting and end point for your journey: On the left side there is the Dijkstra’s algorithm table for the currently selected underground network (London in this case).This section, together with the text manager at the bottom, will guide you through what you should be doing at each stage. The top row lists all the stations which are part of the underground network. The far left column lists the station you are currently analysing ([BS] Bond Street in this case). In order to find out the distance between the current station and all the others, you need to click on the graph all the directly connected, not finalised, stations to the one you are analysing at the moment ([GP] Green Park and [OC] Oxford Circus in this case). Once the current table row is filled in, it means that you have found all the distances from your current station to the directly connected stations. You can see that [BS] Bond Street has two direct neighbours [OC] Oxford Street and [GP] Green Park, which are respectively 0.6Km and 1.4Km from it. The distance between [BS] Bond Street and itself is 0Km, so that route is finalised as there cannot be a shortest journey from [BS] Bond Street to itself. The rest of the stations have a distance of infinite as they are not directly connected to [BS] Bond Street. At this point, you need to select the next station to analyse. The table will highlight all the possible stations that you can move to next; you need to select the station with the shortest distance. In this case, the station with the shortest distance from [BS] Bond Street is [OC] Oxford Street and you need to select it on the graph. This will update the Dijkstra’s table and set the current station to analyse as [OC] Oxford Street. You now need to repeat the same process until the whole table is filled in. Once the Dijkstra’s table is complete, you can submit your answer. The solution can be visualised either on the graph or on the Dijkstra’s table itself. The graph will highlight in red the shortest route from your starting point to the final destination; ([BS] Bond Street, [OC] Oxford Street, [PC] Piccadilly Circus, [CC] Charing Cross in this case). The table instead, will highlight the shortest journey in its first column, from top to bottom. You can submit your answer by listing the shortest journey from the start station to the end station: You can either reset the current underground network or select a new one: If you get stuck, you can use the help button located in the top-left corner: You can test your Dijkstra’s algorithm knowledge on five well known underground stations: It is now time for you to jump to the next exercise and have fun with the Dijkstra’s algorithm interactive simulation. Good luck! Lesson 7.2 Isomorphic graphs adjacency matrix Video: Video Isomorphic graphs . Duration: 5 minutes 5 min Practice Assignment: Isomorphic graphs . Duration: 20 minutes 20 min Video: Video Bipartite graphs . Duration: 9 minutes 9 min Practice Assignment: Bipartite graphs . Duration: 20 minutes 20 min Video: Video The adjacency matrix of a graph . Duration: 9 minutes 9 min Practice Assignment: The adjacency matrix of a graph . Duration: 25 minutes 25 min Video: Video Dijkstra's algorithm . Duration: 8 minutes 8 min Practice Assignment: Dijkstra's algorithm . Duration: 20 minutes 20 min Reading: Reading Topic 7 essential reading . Duration: 2 hours 15 minutes 2h 15m Reading: Reading Dijkstra's algorithm simulation . Duration: 20 minutes 20 min Ungraded Plugin: Dijktra's algorithm simulation . Duration: 15 minutes 15 min Peer-graded Assignment: Dijkstra's algorithm . Duration: 1 hour 1h Review Your Peers: Dijkstra's algorithm Discussion Prompt: Dijkstra's and Hopcroft-Karp algorithms . Duration: 20 minutes 20 min Reading: Reading Topic 7 summary . Duration: 15 minutes 15 min 7.3 Extra resources Dijkstra's algorithm simulation In the next exercise you will learn more about Dijkstra’s algorithm and how it can be applied to real case scenarios. In fact, you will be in charge of running Dijkstra’s algorithm step by step in order to find the shortest route between two stations of well-known underground networks. As you have already learnt, Dijkstra’s algorithm can be executed on weighted graphs. Therefore, we can use the same graph structure to model an underground network where each vertex represents a station, each edge represents a route between two stations and the distance in kilometres between two stations represents the cost or weight of that route: The Dijkstra’s algorithm simulation looks like this: At the bottom there is some help text that will guide you through what you should be doing at each stage: On the right there is the currently selected underground network (London in this case) represented as a weighted graph. Weights or costs represent real distances in kilometres between stations. This section also has a legend, which will help you to understand the graph better. You can see that the journey starts from Bond Street and ends at Charing Cross. You will be prompted to select a starting and end point for your journey: On the left side there is the Dijkstra’s algorithm table for the currently selected underground network (London in this case).This section, together with the text manager at the bottom, will guide you through what you should be doing at each stage. The top row lists all the stations which are part of the underground network. The far left column lists the station you are currently analysing ([BS] Bond Street in this case). In order to find out the distance between the current station and all the others, you need to click on the graph all the directly connected, not finalised, stations to the one you are analysing at the moment ([GP] Green Park and [OC] Oxford Circus in this case). Once the current table row is filled in, it means that you have found all the distances from your current station to the directly connected stations. You can see that [BS] Bond Street has two direct neighbours [OC] Oxford Street and [GP] Green Park, which are respectively 0.6Km and 1.4Km from it. The distance between [BS] Bond Street and itself is 0Km, so that route is finalised as there cannot be a shortest journey from [BS] Bond Street to itself. The rest of the stations have a distance of infinite as they are not directly connected to [BS] Bond Street. At this point, you need to select the next station to analyse. The table will highlight all the possible stations that you can move to next; you need to select the station with the shortest distance. In this case, the station with the shortest distance from [BS] Bond Street is [OC] Oxford Street and you need to select it on the graph. This will update the Dijkstra’s table and set the current station to analyse as [OC] Oxford Street. You now need to repeat the same process until the whole table is filled in. Once the Dijkstra’s table is complete, you can submit your answer. The solution can be visualised either on the graph or on the Dijkstra’s table itself. The graph will highlight in red the shortest route from your starting point to the final destination; ([BS] Bond Street, [OC] Oxford Street, [PC] Piccadilly Circus, [CC] Charing Cross in this case). The table instead, will highlight the shortest journey in its first column, from top to bottom. You can submit your answer by listing the shortest journey from the start station to the end station: You can either reset the current underground network or select a new one: If you get stuck, you can use the help button located in the top-left corner: You can test your Dijkstra’s algorithm knowledge on five well known underground stations: It is now time for you to jump to the next exercise and have fun with the Dijkstra’s algorithm interactive simulation. Good luck! Mark as completed Dislike Report an issue
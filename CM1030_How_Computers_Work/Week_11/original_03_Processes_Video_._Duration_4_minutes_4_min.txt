# Processes
Video•
. Duration: 4 minutes
4 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/9ckpM/processes

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key In the last lesson, we saw that on a modern computer, many applications can be running at the same time, on the same CPU, but how is that actually possible? How can one CPU run several applications at the same time? A standard single-core CPU can only handle one instruction at a time, but somehow, we've got to make it do multiple things. Now, we're going to talk about how to do that, but first, I want to make one thing clear. Up to now, I've talked about applications running at the same time, but I want to be a little bit more specific and use a more technical term. I'm going to use the word 'processes'. Now, a process is a coherent piece of software that is running on a computer and which can run at the same time as and independent of other processes. Often, a process will correspond to an application, but there are also processes running in the operating system kernel that are independent of applications, and some applications have several processes attached to them. So, for example, a network application might have a process to go and fetch data from the network, and another process that handles the user interface, so the user interface doesn't stop while the network process is waiting for data to come from the network. So, what is a process? Well, a process contains code, but we've also seen that applications have their own memory space allocated by the memory manager. Again, what I really meant was that each process has its memory space allocated by the memory manager. So, a process is some code that runs independently of other bits of code and has its own memory. There's something similar called a thread, that has the property of a process code running independently at the same time as other bits of code, but it doesn't have its own memory. It shares memory with other threads. For now, we don't need to worry too much about that. So, we'll carry on calling all of them processes. So, back to the central question. How do multiple processes run at the same time on a single CPU? The simple answer is they don't run at the same time. They run one after another. So, each process runs a little bit and then lets another process have a go. Because modern CPUs are so fast, they can switch between processes faster than we humans can ever tell. So, it seems to us that they're running at the same time. Let's look in a bit more detail at how this happens. The first process starts running and sends its code to the CPU. It does stuff, but it only runs for a certain amount of time, after which it stops. That amount of time is called a time slice. So, we're slicing up the amount of time we have on the CPU between processes. When the first process's time slice runs out, it gets an interrupt. An interrupt is a message sent to the process that says stop, get off the CPU, it's someone else's turn. Then, the second process takes over. It waits for its time slice to finish, gets an interrupt, and then hands over to the third process, and then when that process is finished, it goes back to the original process again. Now, this doesn't necessarily always happen in the same order. There's a lot of reasons why processes might execute in different orders. Sometimes a process is simply high-priority. If it's the application you are interacting with right now, you want it to be fast, and you don't really care if some background process is a bit slower. So, the application that you're using should get its time slice more often than other applications, but there's another reason for changing the running order. What if one process is running and needs something from disk? Loading something off a disk is much slower than running things on the CPU. So, while it's waiting for that, everything else is going to stop because it can't do anything on the CPU until its got data from the disk. So, that's a really good time to move on to a different process. When the data arrives, interrupt. The process finally got the data it was waiting for and can start again. So, processes are a really great way to give the appearance that the computer can do many things at the same time. Often, we don't even notice that the applications on our computer can't run at exactly the same time because they're switching so fast that it really gives the impression that everything is happening simultaneously, and that's one of the powers of a modern computer ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 11.0 Introduction Lesson 11.1 History of operating systems Lesson 11.2 Processes Video: Video Processes . Duration: 4 minutes 4 min Reading: Reading Coordinating the machine's activities . Duration: 45 minutes 45 min Practice Assignment: Practice quiz – Five questions on processes . Duration: 30 minutes 30 min Reading: Reading Process simulation . Duration: 10 minutes 10 min Ungraded Plugin: Simulation: Processes . Duration: 1 hour 1h
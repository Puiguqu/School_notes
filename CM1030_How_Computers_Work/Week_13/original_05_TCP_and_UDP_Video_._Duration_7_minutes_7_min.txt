# TCP and UDP
Video•
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/BMqX6/tcp-and-udp

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key You now know that internet communication involves using a lot of protocols at the same time and that there were many layers of protocols. You know that the link layer handles the physical network, the network layer handles communication across networks, and the application layer handles communication well specific to a particular application like e-mail over the web. I've also talked about the transport layer which handles end-to-end communication between the two computers that are exchanging messages. But I haven't really talked in a lot of detail about what that means and why we need it. Let's have a closer look. The internet standard defines two main transport layer protocols. The most common is Transmission Control Protocol, which is abbreviated to TCP. The other is User Datagram Protocol, abbreviated to UDP. In this video, we'll find out what they do and why we need two protocols. Let's start with TCP. Let's think about a mobile payment system. When I want to pay someone, I need to send a message from my phone to the bank or mobile payments server. But don't forget, that message will be sent over the internet. So, I'll go via a lot of other computers and routers. These are all potentially unreliable, so the message might get lost if any of them is overloaded or goes down. So, the message might be sent from my phone, but never get to the bank. Now that's quite bad. My payment won't be made. Even worse, I won't even know that the message hasn't got through, so I can't even try to resend. What I need is a way of knowing when a message has got through and resending it if it hasn't. That's what TCP does. TCP is a reliable protocol, which means that it makes sure that messages get through. It does a lot of things to ensure that. The first is that it starts by establishing a connection between the two computers. That means that it checks that they're both ready and able to exchange data. It does that by sending some packets whose sole purpose is to make sure that both computers are ready. The device that wants to start communicating first sends a packet called "syn," short for synchronize, which is a request for a connection. The other pre-computer gets that packet and replies with a syn-ack, which means synchronized-acknowledge. That means that it confirms that it's received a syn, and that it's ready to communicate. The original device replies with an ack to acknowledge that it received the syn-ack, and at that point, that they're both ready to talk. Once the connection has been established, the devices can start sending data. The first device sends its first packet. Once the device at the other end has received it, it sends an ack packet to acknowledge that it has been received. That way, your device can be sure that the communication worked. We often send a lot of data over the internet, more than what fits in one packet. To handle this, TCP gives numbers to the packets. So, the first packet of a set of data is packet one, the next packet is packet two, and so on. The acknowledge always includes the packet number, so the sender knows exactly which packets have been received. Once all of the data has been sent and received, the connection is closed with a similar exchange of packets to that used for starting the connection. So, that's what happens when things go right. But what happens if packets get lost? My phone might send its first packet to the bank. If that gets through it, it'll be acknowledged. But what if the second packet is lost? My phone won't wait for acknowledgements before it sends the next packet. That will be too slow. It just sends packet for me anyway. When the bank's computer receives packet three, it realizes that something is wrong, because it was expecting packet two and got packet three. Instead of acknowledging packet three which it isn't ready for, it acknowledges packet one again, because that was the last packet that it correctly received. When my phone gets the acknowledgement for packet one, it realizes that there's something wrong. If packet one was the last one to be received, it has to start again from there. So, it tries resending packets two and also packet three. So, TCP is a reliable protocol because it makes sure that everything gets through. And if data doesn't get through, the sender knows about it because it doesn't receive an acknowledgement. You definitely want that level of reliability when your money is at stake. But what about the other Protocol, UDP? It isn't reliable in the same way. So, why would you ever want an unreliable communication? Let's look at another example. What if you're playing a fast-pace online racing game against the top-rated player. A game like this typically has two copies of the positions of the car; one for your computer and the other one your opponent's computer. The T computers send packets over the internet to make sure that both computers updated when either player moves. So, for example, your car moves forward and your computer will send a data packets to your opponent's computer. It will receive that packet. If it's using TCP, it will acknowledge that packet and update the position of your car. Your car carries on blazing forward and sends another packet, but this one gets lost. In the meantime, you're still moving forward and ready to send the third packet. Your opponent's computer gets a new packet, but it won't accept it because it hasn't received packet two. So, your car stays still on your opponent's screen while your opponent pulls ahead of you. Your computer will get an acknowledge for packet one, which means it resends packet two and your position will be updated to the position in packet two. But that's ridiculous, because you were already well ahead of where you were when you send that packet. You can see that TCP is not a great protocol for this situation. The game needs to fast communication and all the acknowledges slow it down needlessly. But more importantly, this communication needs to take place in real time. If a packet gets lost, there is no point resending it because it'll be already out of date by the time it arrives. You just need to send the lightest packets and things will sort themselves out. That's what UDP does. So, UDP is much better for online games because it's much simpler. It sends packets without acknowledging them or resending them. With UDP, your car will move forward and send the packet that updates your position on your opponent's computer. The same will happen to her car. If your next packet gets lost, it doesn't matter because the packet after that will get through and update your car's position to the most up-to-date value. So, the transport layer makes sure that the right messages get three from one computer to the other without looking at the content of those messages; the application layer does that. and regardless of the details of the networks that they pass through which is handled by the network layer. The two protocols, TCP and UDP, make it possible to adapt the behavior of the transport layer to the needs of a particular application, whether it's the ultra reliable communication you want with your bank or the fast-paced real-time communication you need with online games. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 13.0 Introduction Lesson 13.1 Network architectures Lesson 13.2 Network protocols Video: Video Network protocols . Duration: 6 minutes 6 min Reading: Reading Internet protocols . Duration: 1 hour 1h Video: Video TCP and UDP . Duration: 7 minutes 7 min Practice Assignment: Practice quiz – Five questions on network protocols . Duration: 30 minutes 30 min Discussion Prompt: Networked software . Duration: 30 minutes 30 min
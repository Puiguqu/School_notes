# Servers and databases
Video•
. Duration: 8 minutes
8 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/CPTsn/servers-and-databases

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key So, you now know that webpages are made up of elements that come from an HTML template, like the layout or branding. But other information, like the content of the pages, is stored in a database, so that lots of different pages can be created without having to create separate files for each of them. In an online course like this one, the data will be about the course, and can be anything from its title to the details of a quiz. But what is a database? A database is a collection of data stored in a structured way. A database could just be an ordinary file, but it normally means data that's managed by a piece of software called a database management system. A Database Management System is software which controls how data is stored and accessed by other applications. It provides an abstraction of the data to the applications. The application doesn't need to know how it's stored or represented, it just queries the database management system which gives it the data. In production systems, the database typically has it's own database server, but this is just an ordinary computer, admittedly one with a big hard disk, the important thing is the software. There are various different types of database called models. A database model is how the data is represented and accessed. Though many new types are becoming popular, the overwhelmingly most common database model is the relational model, which I'll explain in this lecture. The key to the database model is that data isn't just a big lump of stuff, it has structure. For example, there are many different bits of information that make up a webpage, like the title of a course, it's summary text, and the name and picture of the instructor. The relational model breaks down an item of data like a course into different elements like title, summary, and instructor. A relational database stores all its data in tables, a bit like a spreadsheet. Each row of the data table is a different entry called a Tuple. In this case, each tuple is of course, each column is a particular aspect of our entry called an attribute. For example, the title summary or instructor name. Every row of the table has exactly the same elements in it to make the data easy to handle. Each cell contains a data itself which is normally text or numbers. More complex data like photos are typically too big to be stored in a database, so they're normally stored in files and the file names are stored in the database. But hang on a second, there's often more than one instructor on a course, but only one cell with an instructor name. I guess we could fix that by adding extra attributes, maybe one for instructor too. But what about learners? Should we add an attribute for each possible learner on a course? There are potentially thousands on each course, and the number of learners might vary massively between courses. Do we need an attribute for learner one right up to learn of 3,000 and beyond? Also, learners aren't features of courses. You're probably doing several courses at each time. It would be silly if there was a different copy of your data for each course. What we do instead is have a separate table for learners, but how do we know which learners and in which courses? We use a third table to link the two of them together. Let's call it enrollments, where each row has an attribute for student and an attribute for course. That means that that student is on that course. We can also do the same thing with instructors. How do I represent a learner in the enrollments table? The obvious answer might be to use their name, but what if two people have the same name? It might be confusing for teachers, but it shouldn't break the database. What goes in the cells? Most database systems add an extra attribute called an "id". This is typically a unique number. So, no two courses have the same ID and no two learners have the same ID. We can use this ID to identify an entry from one table to another. In this case, the enrollments table can use the ID's to identify learners and courses. How do we use a database? How do we get the data out? Relational database management systems have a range of functions to access data in a database. When a web server creates a homepage for a course, it probably needs all the data from that courses tuple in the course table. The operation to get data from a particular tuple is called Select. Select doesn't always just return one result. If I want all the courses with mathematics in the title for example, it might return several. This is great for a webpage that gives a list of courses like search results. But a list of courses doesn't need all this information, you might just need the title. That means that you want to extract just some of the attributes of the results of the select. Accessing only some of the attributes of a table is called a project operation. So far, we've just used data from a single table, but the power of relational databases is, is that you can combine them. How do you get the page that contains all of your courses? You need to select the data from the course's relation, but do it based on another table, the learners table which stores your data. Your ID from the learners table is used to look up the courses you are taking in the enrolements table. This lookups gives a list of course ID's which are used to select courses from the course table. That gives a list of all your courses that can be shown on the webpage. What if you want that web page to also share your grade for each course? You're grade can't be part of the course table as it's specific to you. Each learner during a course will have a different grade. The enrollments table would be a good place for the grade since it's the table that combines data about learners and courses, though in a real website database, you might have a separate table just for grades. But that means that the grade is in a different table from the data in the course, and creating a list of your courses that shows your grades means combining them together. A relational database command called join allows you to do that, take data from one table and join it with data in another table to create a new combines table. Select, project, and join our three examples of the commands you can use to access data from a relational database. Most relational databases use meany programming language called Structured Query Language or SQL as the way to access these commands. It's a testament to how important relational databases are that SQL always seems to top the chart of programming languages most requested in job adverts. In this video, we've seen how a database and the command select, project, and join can be used to create a course page, a list of courses containing a particular word, and also a list of your own courses. Part of the power of databases for websites is just that you can use a single set of data to create many different useful web pages without having to manually design each one, but actually there's something even more powerful. The last example included your grade as a learner, that grade is based on the assignments that you have written, in other work that you have done, that is also part of the database. When you post to a form it gets added to the database and becomes part of the forum webpage. When you posts to the forum, you've contributed to the course web pages without ever having to create a new page yourself or having access to the web servers, because your input can be saved to the database. So, a database can allow you or any ordinary web user to contribute to be parts of the website. That more than anything else is the true power of the modern web. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 16.1 Databases Discussion Prompt: Data about this course . Duration: 30 minutes 30 min Video: Video Servers and databases . Duration: 8 minutes 8 min Reading: Reading Database fundamentals . Duration: 1 hour 1h Video: Video Interview with Matthew Yee-king about NoSQL . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – Databases . Duration: 30 minutes 30 min Lesson 16.2 Summary
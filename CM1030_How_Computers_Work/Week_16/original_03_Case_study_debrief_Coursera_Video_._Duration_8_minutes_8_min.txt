# Case study debrief: Coursera
Video•
. Duration: 8 minutes
8 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/iRMvn/case-study-debrief-coursera

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Well done, you've now gained an in-depth understanding of a website that you use every day. You've applied what you've learned in this topic and the rest of the course to understanding technology you use on a regular basis. I'd like to give you an example of an answer to this week's exercise by using a website you access regularly. The one this course is hosted on, Coursera. When you answer the question, I would not expect you to get all the details right because often you can't know the full answers without talking to people who developed the site. But, because I'm your teacher and you might quote me on what I say, I wanted to make sure that I got things right, so I cheated. I talked to my colleagues at Coursera who were very helpful in providing me with answers. I'd like to thank them a lot for the help they've given with this lecture and hope that you find it useful too. So, the question is, what happens when you type coursera.org into your browser? The first thing is that your browser sends an HTTP request over the Internet. It uses the HTTP protocol and the HTTP packets are wrapped in TCP and IP packets. Now, you have quite a bit of personal data stored on the Coursera site and you wouldn't like that shared. You certainly don't want the entire Internet to know which questions you got wrong. You just want to keep that between us and don't worry, we won't judge you because we know that getting things wrong is the best way to learn. So, Coursera needs to be secure. That means that it doesn't actually use the HTTP protocol, it uses the encrypted HTTPS protocol. You can easily tell by looking at the address bar in your browser. The HTTPS request is sent to a web server. Now, when we first talked about servers, we talked as if the server was just one computer. But nowadays things are much more complex. Coursera runs on Amazon Web Services or AWS. AWS is an extremely popular cloud hosting platform used by numerous major websites to host their servers. That means that Coursera does not have their own servers. They host their sites on Amazon servers. The server is not a single machine, but a cluster, a really massive cluster of computers that combined together to act like one server, except they act like many servers because the Coursera site runs on virtual servers and several virtual servers can run on a single machine. The server will handle the request. It probably has to handle a lot of requests at the same time. Coursera uses a variety of methods for handling multiple requests, but the main one is something called fork-join thread pooling. You heard earlier in the course that the thread is like a process, but that multiple threads share memory. The details are quite complex, but in essence, the server uses threads to make sure that it can perform the various tasks that requests need without ever being held up by a single request. Coursera web pages are created based on data in a database. For example, the content of courses or learner data. The database is stored on a separate virtual server from the web server and the web server accesses it using an API, a set of standard commands for data access. The Coursera APIs are served by over 100 services for accessing different types of data. This makes it very easy for Coursera to support both a web app and mobile apps. They can both use the same API for accessing the basic data and course content, but have different code for generating HTML web pages or the app user interface. I said that the database is stored on another virtual server, but there were actually several databases stored on different virtual servers. That is because Coursera has many different types of data. The data that makes up course content like the text of reading, quiz questions or discussion prompts is very different from learner data like name, nationality, and grades. That means that some data might be well-suited to a relational database while others might be suited to a NoSQL database. Having multiple database servers allows Coursera to choose the best one for each type of data. Not everything is stored in a database, videos are too big to be stored efficiently in a database. So, they're stored as assets files on the server. The database just stores the title, filename, and other metadata associated with the video, but the representation of a video is very important. Coursera videos are streamed. That means that you can start watching before you finish downloading. You need to use special compression methods to make a video stream efficiently. When I as an instructor upload a video file, the Coursera servers convert the file into a format that supports streaming, a process called transcoding. In fact, they transcode the video into several formats each suited to a different screen size. For example, mobile versus desktop or bandwidth. When the data has been fetched from the database or assets, it needs to be converted into an HTML web page, a process called rendering. You've seen before how many websites use software frameworks for rendering the web pages. Coursera uses a framework called React that's very popular in the moment. HTML pages can be rendered on the server. Data from a database is combined with the HTML to produce a web page that's then sent back to the client, or it can be rendered on the client. An HTML template is sent to the client and data is sent separately. The two are then combined in the browser to create a web page. Server-side rendering is great because it lets powerful servers do most of the work and doesn't slow your browser down. On the other hand, client-side rendering allows you to update web pages with little bits of data without having to reload the whole page. So, which does Coursera do? Actually, it does both. When you first go to a page on Coursera, it renders on the server and as you navigate to different links, only the parts of the page that are changed are loaded and then rendered on the client. For example, as you navigate the course watching videos and taking quizzes, the sidebar is not reloaded from the server, only the content part on the right. In fact, the Coursera engineers are constantly tweaking and updating the code to make sure it runs as efficiently as possible. So, they might change which parts are rendered on the server and which on the client. By the time you watch this, some of the things I've talked about might have changed as the platform improves. A website is not a single piece of software that is created once and stays the same forever. Sites like Coursera have teams of engineers who work really hard to constantly update the technology to make sure that it works as smoothly as possible for you, their learners. So, Coursera is a pretty complex website and illustrates how modern websites can combine many very different technologies that you would not know about from simply using the site. How does all this relate to the marking rubric? This video has talked about a lot of the features of web technology we learned about in the topic and illustrated them by seeing how they apply to Coursera. It has explained the many components that make up Coursera. I've explained the behavior of Coursera, how it works in terms of concepts like network protocols, HTTP, servers, databases, and HTML rendering. I've also talked about why certain technical choices were made and their impact on the performance of the website. I've also brought in ideas from other topics like processes and video compression, as well as mentioning a few things that weren't in the course like the React framework. In fact, because Coursera is such a complex site, there is quite a lot that goes beyond the abstractions I taught you. I wouldn't expect you to know all the details like thread pooling, but you'd score very well if you did include some features like that. I know that what I've said is pretty accurate because I discussed this with Coursera engineers. But I also know that most of you can't do that. So, I'm not expecting you to get all the details right, just to give plausible explanations. I hope that this assignment has given you some new insights into the web platforms that you use every day and in particular, the one that you're using to learn this course. These web platforms are really important part of our lives today, and as computer scientists, you may be responsible for developing the next generation of platforms. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 16.1 Databases Lesson 16.2 Summary Peer-graded Assignment: Web sites . Duration: 3 hours 3h Review Your Peers: Web sites Video: Video Case study debrief: Coursera . Duration: 8 minutes 8 min Discussion Prompt: What have you learned? . Duration: 30 minutes 30 min Graded Assignment: Practice quiz – Topic 8 . Duration: 30 minutes 30 min Video: Video Summary . Duration: 49 seconds 49 sec
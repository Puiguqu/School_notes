# Debugging
Video•
. Duration: 6 minutes
6 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/IUWJM/debugging

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Now, I want to teach you about one of the most important skills a computer scientist has, and one that can help everyone; debugging. In computing, the word bug means an error in a computer program. The term is supposed to have originated in the 1940s, when the great computer science pioneer and Admiral, Grace Hopper, was having trouble with errors with a computer. She eventually looked inside and found that a moth had been caught inside the workings of the machine. Nowadays, we don't have many computer errors due to insects. I don't think there were many even in Grace Hopper's day. But we certainly do have a lot of computer errors. So, debugging is a term for getting rid of bugs, or errors. When debugging, you spend most of your time trying to find out what's causing the error, which can actually be very hard. Often once we've found the cause, fixing it can be quite easy. Debugging is one of the hardest things in Computer Science. However expert you are, there will be problems that you seemingly can't fix. But there are some tactics that can help anyone become a better debugger. I've adapted this list from a great book called Debugging, by David J. Agans. The first thing to do is understand the system. This whole course has been about helping you better understand computer systems. The more you understand, the better. But trying to understand isn't enough. The second rule is, look, don't think. It's easy to come up with a lot of theories about what might be going wrong. But they might be wrong or completely unconnected to what's really happening. You can only really understand a problem by looking carefully at what the computer is doing, gathering as much information as you can. The next rule is, make it fail. That sounds a bit strange, but if you want to fix a problem you need to make sure you know when the problem happens. Often, computers go wrong erratically, and you're never sure if something will work or not. To be able to test the system and find out what is causing a bug, you need to be able to reproduce the bug reliably. Also, knowing when a bug happens and when it doesn't is a key part of understanding what causes it. The core of debugging is changing things. I can try to change something and see if a bug still happens. For example, if I'm having trouble printing, I could try printing a different document to see if it's a problem with the document itself. Every time you change the situation a bit, you're getting more information about what does and doesn't cause the error. This leads us to the next rule; only change one thing at a time. If I try printing a different document from a different computer and it works, I don't know whether the problem was with the document or the computer. Let's go through an example of debugging a problem with printing. I open a document in my word processor and try to print it but nothing happens. First, let's understand the system. For printing, there are a number of bits of software and hardware involved. There's the word processing application on printing form. The're also print drivers, list of software on my computer that communicate with the printer. There's the physical connection to the printer, which might be a direct wire or a wireless network connection. Then, there's the printer itself. None of this tells us what's wrong, but knowing what makes up the system can guide us to the kind of things we can be checking. , look for more information. Are there any error messages? Is your word processor giving you any sign of what's wrong? Most operating systems have a print manager software. Try opening that up to see if there are any error messages or anything obviously wrong there. Look at the printer itself. Does it show an error message? If you're lucky, there will be an error message and it will explain in enough detail for you to solve the problem. But often, there won't be a message or the message won't make much sense to you. You can try searching the internet for the particular message, and you'll often get help that way. If none of that works, it's time to start properly debugging. That means changing one thing at a time to see whether it makes a difference. Here's a sequence of things I might try. First, I'd try printing a different document from your word processor. If that works, it's a sign that the problem is with the original document. If that doesn't work, try closing your word processor and opening it again. As I've said before, that sounds stupid but it often works. If it works, it means that the problem was probably some temporary state in the word processor. , you can try printing from another application, for example, a PDF viewer. If this works, the problem is likely to be with the word processor. If the problem happens with other applications, the next step is to turn your computer off and on again. That would mean the problem is some temporary state in the computer. If restarting the computer doesn't work, we start the printer. The problem could be a temporary state of the printer. If restarting doesn't work, try printing from another computer. If that works, then it's likely the problem is with you print drivers. Maybe that you need to reinstall them. Reinstalling drivers normally fixes them. If none of those things work, it looks like the problem is with the printer. Remember to only change one of these things at a time, otherwise, you won't know which one fixed the problem. This isn't meant to be the perfect guide to debugging a printer. It's meant to illustrate a general approach based on understanding the parts of the system that could go wrong, and then systematically change them one-by-one to see if you can find out which one has gone wrong. I'll add one more word from David Agan. Check the plug. You can spend hours trying to figure out what's wrong with your print drivers only to find out your printer isn't plugged in. You wouldn't be the first person, including very experienced computer scientists who have ignored something very obvious. I've certainly been guilty of that myself. Sometimes something seems so obvious that we don't even think we can make mistakes like not plugging your printer in. But everyone makes silly mistakes. So, it's nothing to be ashamed of but it is something to check for. Debugging is one of the most important skills of a computer scientist, and it can take years to learn. But these simple rules can help me get better quickly and will help you get better at dealing with every day computer problems even if your aim isn't to become a computer scientist. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 2.1 State Lesson 2.2 Modularity and applications Video: Video A notional machine: files . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – A notional machine: Files . Duration: 10 minutes 10 min Practice Assignment: Files . Duration: 15 minutes 15 min Video: Video Modularity . Duration: 2 minutes 2 min Video: Video Applications . Duration: 5 minutes 5 min Practice Assignment: Practice quiz - Applications . Duration: 10 minutes 10 min Reading: Reading Looking inside applications . Duration: 20 minutes 20 min Video: Video Debugging . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – Debugging an application problem . Duration: 30 minutes 30 min Reading: Reading Modularity and applications – lecture summaries . Duration: 10 minutes 10 min Lesson 2.3 Summary
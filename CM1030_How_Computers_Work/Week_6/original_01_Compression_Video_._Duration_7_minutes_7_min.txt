# Compression
Video•
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/3JO2k/compression

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Data can get pretty big. Particularly, things like image and video files can be very large, making it a problem to store them or transmit them over the Internet. Luckily, we have compression algorithms that make it possible to reduce the size of files so they can be stored more efficiently. But how is that even possible? How can we get rid of data? Surely, that would mean losing important information. In fact, we can reduce file sizes without losing information because most data representations are redundant. Meaning that they use more bits to represent something when it's really necessary. English is a very redundant language, and British English is even more redundant than US English. If I want to describe some cold air coming through a door, I might write the word draught like this. While a US colleague would write it like this. There's no reason why I need so many letters to represent the sound draft, but because of ancient convention, I write it that way. So, because I'm using more letters than I need to, it should be possible to represent the word in fewer bits. It's common to compress text using a dictionary. Each word in the dictionary is replaced by a unique code. These codes can have different numbers of bits. The compressed versions of very common words like "the" or "and" might have very short codes, just two or three bits, while rarer words like "electroencephalogram" might have a long code. By doing this, most words will be replaced with shorter codes, reducing the total amount of data. Let me show you another example. The background of a typical document is normally almost all white. When it's represented as an image, it will have thousands of identical white pixels. It seems overkill to represent every single white pixel separately as its own three bytes. It's common to compress text using a dictionary. Each word in the dictionary is replaced by a unique code. These codes can have different numbers of bits. The compressed versions of very common words like "the" or "and" might have very short codes, just two or three bits, while rarer words like "electroencephalogram" might have a long code. By doing this, most words will be replaced with shorter codes, reducing the total amount of data. Let me show you another example. The background of a typical document is normally almost all white. When its representatives as an image, it will have thousands of identical white pixels. It seems overkill to represent every single white pixel separately as its own three bytes. This could be compressed very efficiently using something called run length encoding. A run is a sequence of pixels of the same color. Instead of storing 200 white pixel values, you store the pixel value only once using three bytes and then have another byte saying how many pixels there are. So, in this case, 200. You've replaced 600 bytes with just four. That's pretty good compression. Neither of these methods I've just described would work with a complex photograph like this one, where every single pixel values different. To compress photographs or audio or video, you need much more sophisticated compression algorithms. These typically transform the data from more pixels or audio samples into another form of representation like sound frequencies, where it's easier to find redundant information. At the beginning of this video, I said that it's possible to compress data without losing information, what is called lossless compression. But sometimes we can achieve better compression by losing some data called lossy compression. Now, if you're compressing text and lose some information, you're likely to notice because words would start losing letters. But with images and audio, it's possible to lose some information that's almost unnoticeable to most people. Lossy image, audio and video algorithms can achieve much better compression even if the amount of data loss is not that much. That is because by losing information, they can make the image representation more redundant and so easier to compress. At the beginning of this video, I said that it is possible to compress data without losing information, what is called lossless compression. But sometimes we can achieve better compression by losing some data called lossy compression. Now, if you're compressing text and lose some information, you're likely to notice because words would start losing letters. But with images and audio, it's possible to lose some information that's almost unnoticeable to most people. Lossy image, audio, and video algorithms can achieve much better compression, even if the amount of data loss is not that much. That is because by losing information, they can make the image representation more redundant and so easier to compress. It's important to remember that lossy compression does lose information. So, compressing and decompressing many times will degrade the image or audio. So, there are lots of cases where you want to stick to lossless compression to make sure the quality is as high as possible, for example, if you're archiving vintage photographs. But for ordinary uses, like putting an image on your webpage, you'll want to use lossy compression because it reduces the file size much more. There is another disadvantage to compression. Compression and decompression algorithms take time. They're often doing a lot of sophisticated processing on the data and that can be slow. That means loading and using compressed files will take longer than doing the same with uncompressed files. That's why it's common to compress files for download from the Internet but also to decompress them when they are on your computer so they're quick to use. Compression can seem a bit magical at first because it's making data disappear. But it's really down to algorithms that aim to represent data more efficiently. It's a good example of how different data representations can have different effects like reducing file size, and why it's important to be aware of how your data is represented. I'm sure you use compression all the time in your ordinary computer use, and you'll use it even more as a computer scientist, and who knows, maybe the next great compression format will be designed by you. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 6.1 Compression Discussion Prompt: Data compression . Duration: 10 minutes 10 min Video: Video Compression . Duration: 7 minutes 7 min Reading: Reading Data compression . Duration: 1 hour 1h Practice Assignment: Practice quiz – Data representation and compression . Duration: 30 minutes 30 min Video: Video Interview: MP3 format . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – Independent Research: JPEG . Duration: 30 minutes 30 min Lesson 6.2 Summary
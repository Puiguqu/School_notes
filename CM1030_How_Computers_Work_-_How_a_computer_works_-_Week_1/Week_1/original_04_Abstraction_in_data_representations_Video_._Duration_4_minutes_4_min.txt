# Abstraction in data representations
Video•
. Duration: 4 minutes
4 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/58MDi/abstraction-in-data-representations

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Abstraction in Computer Science terms, is a simplified representation way of thinking about a piece of software, with other competing technology which emphasizes the key details without distracting us with all the complexity that's going on. How does this help us? What does it say about computers? Let's look at it in terms of the video you're watching right now. This video, is represented as a massive number of little electrical charges stored in tiny capacitors on a microchip, or it might be represented as by a whole load of magnetization on a hard disk if it's stored on a hard disk. While it's getting to you over the Internet, it's represented as tiny pulses of light in the optic fibers that make up the backbone of the Internet. But in your house or office, it might be coming over electromagnetic waves that make up the wi-fi signal. So this single video can be actually represented by lots and lots and lots of different physical things. But it's always the same video. It isn't useful to think about all the detailed physical differences between these media. We need a way of thinking about the video that ignores the differences and pays attention to the similarities that make up the essence of this video. What we need is an abstraction. The most basic abstraction we can use is to represent things as numbers. Almost any data on a computer could be thought of that way, as numbers and a video can be represented as lots and lots and lots of numbers. A computer picture is made up of a grid of tiny little squares that we call pixels, short for picture elements and each pixel has a color. If you cast your mind back to your earliest education, you will remember that you were probably taught that any color could be made by mixing together three paint colors which we call the primary colors. On computer screens, colors are made up of light not paint and the primary colors for lights are red, green and blue. We can mix these three together to make any color we want. So we can represent a color by three numbers. How much red there is, how much green, and how much blue. So, we can use our first abstraction to build our second abstraction which is pixels and colors. This is a much easier abstraction to think about. It starts to look like a picture, but it's still quite complex. So we can go simpler. This grid of pixels makes a picture, and the video is a whole load of pictures, a sequence of pictures one after another. That's our third abstraction. So now we have several abstractions. Each one simpler and more abstract than the last. We call these, the layers of abstraction. Something simpler to understand is built-in to the complexities of the going on underneath it. Each abstraction is useful for different things. If you were designing special effects so image filters for a video, you'll probably need to think directly about pixels. If you were designing network protocols to transmit images and video, then you would need to think about the numbers and maybe even the light pulses in the optic fibers. But if all you're doing is playing video, then thinking about it in terms of that sequence of images, is enough. Abstraction is key to how we understand computers. In fact, everything I will describe in this course is an abstraction. That means that as you learn more, you will find that almost everything is more complex than how I describe it. Feel free to find the bits where my abstraction might not be quite right but also remember that most of the time, you don't need that extra complexity. The simple abstract version will be easier to understand and that will make it more useful. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 1.0 Introduction Lesson 1.1 Abstraction Video: Video Abstraction . Duration: 4 minutes 4 min Video: Video Abstraction in data representations . Duration: 4 minutes 4 min Reading: Reading Abstraction and abstraction in data representations – lecture summary . Duration: 10 minutes 10 min Practice Assignment: Practice quiz – Abstraction Submitted Video: Video Notional machines . Duration: 4 minutes 4 min Reading: Reading Notional machines – lecture summary . Duration: 10 minutes 10 min Practice Assignment: Practice quiz - Notional machines Submitted Video: Video CPU and memory . Duration: 3 minutes 3 min Discussion Prompt: Notional machines . Duration: 30 minutes 30 min
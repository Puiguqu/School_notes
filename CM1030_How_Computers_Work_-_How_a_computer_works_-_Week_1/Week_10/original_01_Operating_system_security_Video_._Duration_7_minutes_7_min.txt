# Operating system security
Video•
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/dvzIj/operating-system-security

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Security is a really important function of operating systems, your computer needs to be secure. If it gets hacked by somebody on the Internet, or if somebody steals your device, then they can access lots of your personal data which could be embarrassing, or they could get important commercial or financial data which could potentially lose you or your company a lot of money. So, operating systems need to protect the data that's on a computer from people who are trying to steal it. Also, sometimes simply protect it from people who might make a silly mistake and delete a file when they hadn't intended to. The most basic security function an operating system provides is a login, so that if you don't have the right to access a computer, you can't do it, because you have to enter a password or in the case of a phone a pin number. That protects your operating system from somebody who's simply should not be accessing it. But actually it's a bit more complicated than that. If it's your own computer and you're the only person that uses it that's fine, you have the right to use it but nobody else does. But often, computers are used by many people. Take for example the labs we have in our university, they're used by many many students and some staff to do their work and there are lots of things that can go wrong. We don't want one student to be able to delete the files of another student, that will be bad, and we don't want some students accessing files belonging to some of the lecturers because they might get access to exam questions, which would be unfair. So, there are lots of security implications when you have a computer that is used by many people. We need to be able to restrict what most uses of those computers can do, for example, not accessing other people's files. But we do need some people to have complete access to the computers. Otherwise we wouldn't be able to install, manage and look after the operating system. So, what we generally have is two levels of access to a computer. Most people, students and even actually members of staff are ordinary users. We can access our writing files, we can change our personal data and we can use all the applications that are on the computer, but importantly, we can't access anybody else's files and we can't necessarily install software or make changes to the computer. It would be pretty bad if a student or staff member could come in and accidentally delete a really important application, that would stop everybody else being able to use that computer properly. So, there is a second class of user called an administrator who has complete rights to the computer. They can install applications, they can add new users, they can delete user accounts and sometimes they can even go in and change user files. This is handy because maybe I've messed up my files and I want to retrieve something I've deleted or my account doesn't work and I really need somebody to fix it for me. The administrator can do anything to the files because essentially, the administrator is the person who knows what they're doing and has the right do it. Most operating systems make the distinction between a user and an administrator. So, only certain accounts have the rights to be able to make changes. So, another key function of an operating system is not simply excluding people who have no right to use a computer, but defining who can make changes to a computer and who is simply able to use it and those two levels don't just apply to users, they actually apply to code. Now, we saw in a previous video that applications have their own memory spaces, and the operating system can prevent one application accessing the memory space of another and that's really important. We don't want an app messing with another app and it's particularly important in multi-user operating systems where the two apps might be run by different people. So, we don't want one person to say or affect what another person is doing. How does the operating system do that? Well it actually happens in the memory manager. The memory manager defines what areas a memory accessible to one app versus another app. But that definition is based on some data in a register somewhere on the CPU. What if an app could change which memory areas it could access? Then it could give itself access to the entire computer and start messing around with other apps and I bet you any virus watcher would do that instantly. So, we need a way of stopping the applications being able to change their memory areas. But you can't stop every bit of code changing memory areas, because the memory manager needs to see that. The operating system needs to be able to change memory areas in order to allocate memory to applications. So, what happens is, there are two levels of machine instruction, you have instructions that any bit of code can execute at load store jump. But there are also some special instructions that only certain bits of code can do, like changing the memory areas that an app can access. These are called Privileged Instructions which means they are restricted to Privileged code. There are various rules for what makes code privileged, but a simple way of thinking about it is that a lot of the time the code that can actually access privilege instructions exist inside the kernel of the operating system. So, the kernel of the operating system is a bit like the administrator. It can do whatever it likes because it's the operating system, it knows what it's doing. The applications are a bit like users, they're slightly restricted in what they can do, they have to follow the rules of the operating system. If they need to access privileged instructions, they have to do so via the kernel. This level of security is built into the hardware. The privilege levels are parts of the hardware of the CPU not part of the operating system. So, it's impossible to get around it. When the CPU is running an application which is not privileged code and tries to run a privileged instruction, the CPU will prevent it, because it doesn't have the right level of privilege. On the other hand, the kernel or some other privilege code, can execute the privilege instruction and it's allowed to do so because it's privileged code. So, security in the operating system happens both at the level of users and even at the level of code and applications. It's built into the operating system and some of it is even built into the hardware of your CPU. This is the sort of security system you will need to understand as you go from being someone who uses computers to someone who manages them. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 10.1 Operating system security Discussion Prompt: Protecting yourself from malware . Duration: 30 minutes 30 min Video: Video Operating system security . Duration: 7 minutes 7 min Reading: Reading Security . Duration: 50 minutes 50 min Practice Assignment: Practice quiz – Five questions on operating system security . Duration: 30 minutes 30 min Lesson 10.2 Summary Summative quiz and Coursework assessment
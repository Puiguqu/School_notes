# Mobile payments
Video•
. Duration: 4 minutes
4 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/rRGZg/mobile-payments

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Let's look at an example of a computer system that needs to handle money processes. We are increasingly trusting our money to digital services, which means to computers. Though, this might have started with bank accounts, one of the most important trends right now is mobile payments. Payments made potentially from one ordinary person to another using mobile phones. It was Kenya's M-Pesa system that really kickstarted the idea of mobile payments. That was a real trail blazer. It allowed anybody with a mobile phone to add money to an account and to transfer money to other people who also had an M-Pesa account, whether that was just family or friends, major shops, or even small traders. It really allowed digital payments to take the place of cash, but in a way that was more secure and it made it easy for people to transfer money across long distances. So, how does it work? I have my mobile phone and I'd like to send some money to a friend. I enter the details of my friend's phone number and send some money. In this case, let's say one Kenyan Shilling. A request is sent to the M-Pesa servers, where there's a recording in that databases that corresponds to my friend's account. Inside that database is the amount of money my friend already has, say 100 Shillings. So, my request comes in to the server, and then a bit of code will look up how much money is in my friend's account, 100, that number will be loaded into memory somewhere or into a register. The program adds my one shilling and then writes a new number a 101, back from memory to the database record for, my friend's account. That's the basic transaction, quite simple. Now, of course, a service like M-Pesa has millions of users and is processing thousands, if not millions of transactions every day. The servers need to handle many, many requests at the same time. The way most servers will do that, as we've seen, is with processes. So, the computer that the server is running on will create a new process for each of these requests, perform the transaction, and when it's completed, the computer will close down the process. Those processes will work fine as long as each of the request M-Pesa receives refers to a different account. But what if I've agreed to buy presents for the teacher of my children's class and all the other parents have to transfer money to me? But when the first process returns, it already read a 100 Shillings into memory, so it doesn't read it again. It just adds one to that number, writes back 101. So, the final result in the database is 101, instead of what it should be, which is a 103. I've just lost two Shillings because their transaction got overwritten. This is a classic example of where we need not only processes, but also semaphores. With the semaphore, the system can make sure that only one of those transactions can write to my bank account at the same time. No financial system, bank account, or database will be implemented in such a way that would allow simultaneous access without the use of semaphores. So, next time you're trying to make payments on your mobile phone or on a computer or even with a credit card in a shop, think of all the processes running on the bank servers at the same time, and all the semaphores that or making sure that you never lose money by mistake. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 12.1 Inter-process Communication Video: Video Semaphores . Duration: 5 minutes 5 min Reading: Reading Handling competition among processes . Duration: 50 minutes 50 min Practice Assignment: Practice quiz – Five questions on inter-process communication . Duration: 30 minutes 30 min Discussion Prompt: Concurrency problems . Duration: 30 minutes 30 min Video: Video Mobile payments . Duration: 4 minutes 4 min Lesson 12.2 Summary
# Network protocols
Video•
. Duration: 6 minutes
6 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/ljnY8/network-protocols

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Computers need to know how to communicate with each other over networks. It's no good having a physical network, if the computers can't understand the message is being sent. This is why we need protocols. In a previous topic, I described a protocol as being a bit like a language for network communications. In a way it is, but it's more than that. A protocol is also the set of rules, that computers use to communicate over networks. Protocols are designed to overcome some of the problems that can come up during network communications. For example, what if two computers tried to send messages at the same time? The messages will become mixed up as they both get sent over the same bus. So the network protocol needs to stop that happening. The way it does that is that when a computer transmits, it also checks whether there are any other transmissions on the bus. If there are, it stops transmitting. Because the other computer also follows the same protocol, it also stops transmitting. Each computer waits a random amount of time until it transmits again. When it's wait time is over, it will try to transmit again. Since the time was random, it's very unlikely that the other computer will transmit at the same time. This protocol is called Carrier Sense Multiple Access with Collision Detection, and is implemented as part of the Ethernet standard. Protocols also control how messages are sent. As we've seen before, messages are divided into packets, each of which contains message data, but also other information that is part of the protocol. For example, about the destination of the packet. Just like the address on an envelope. This additional information is called the Packet Header, and each protocol defines the information that's inside its Packet Header. But messages don't just use a single protocol. To be sent over the internet, a packet needs to use both the protocols of the physical networks that are transmitting it, and the protocols of the internet as a whole. Let's have a look at an example we've seen before. First, the data we want to send is put into a packet for the Internet Protocol or IP. Then, that packet is put inside another packet for the physical network being used, maybe Wi-Fi. That packet is sent across the Wi-Fi network until it reaches the router. What the router does is take the IP packet out of the Wi-Fi packet, and puts it into another packet so that it can be sent over the next network, may be Ethernet. The Ethernet packet is sent over the Ethernet network towards its destination, where the original data will be taken out at both the Ethernet packet and the IP packet. In fact, it's even more complex than that, because data is typically transmitted using many layers of packets inside other packets, each based on a different protocol. The innermost layer is normally the application layer. Application protocols, are specific to a particular application or type of application. For example, the HTTP protocol is for web pages and web browsers, POP and SMTP are for email. The transport layer, handles communication between the start point and the destination of a communication. It manages what the computers at each ends do to communicate, without worrying either about the content of the message, or all the networks and routers in between the two computers. TCP and UDP are two transport layer protocols that you will learn about later. The network layer, handles how the packets are transmitted across many different networks from one computer to another. It handles how the message is passed between one network and the next via routers. The network layer protocol is almost always IP, the internet protocol. The link layer is the protocol that handles transmission across a single physical network, for example the Ethernet or WiFi protocols. So when a message is sent it's put into many nested packets. For example, when a server sends a web page it will put it into an application layer, HTTP packet. Before it's sent, this packets needs to be put into a transport layer TCP packet, which goes inside a network layer IP packet, and a link layer Ethernet packet. This link layer packet is sent over the Ethernet network until it reaches a router. The router takes a network layer packet out of the Ethernet packet, but it doesn't need to look at the transport or application packets. It just puts the network packet into a new link packet, so they can be sent over the new network. The final destination whether it's a server, computer, or phone, takes the network packet out of a link packet, and the transport packet out of a network packet, it uses the transport packet to check that the communication with the server is working properly, and if it is, the destination device extracts the application HTTP packet, and sends it to the web browser. When a packet is received it could be used by many applications; web browser, email software, or even your favorite retro video game. How does the network software decide which to send it to? It does it based on something called a Network Port. Now, the word port is often used for the connectors that you use to plug wires into a computer. You might think that the Network Port is the connector where you plug your network cable, but that is not what I mean by Network Port. A Network Port is actually just a number attached to a packet, which tells you a network software where to send that packet. For example, Port 80 is used by the HTTP protocol, and so packets with this port, should be sent to your web browser. Port 110 is used by POP3 which is an email protocol, and so they should be sent to your email client. Most games use standard protocols and don't have their own port numbers, but the classic video game Doom, actually has it's own import. Maybe because it was one of the first network video games, or maybe because nobody else wanted Port number 666. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 13.0 Introduction Lesson 13.1 Network architectures Lesson 13.2 Network protocols Video: Video Network protocols . Duration: 6 minutes 6 min Reading: Reading Internet protocols . Duration: 1 hour 1h Video: Video TCP and UDP . Duration: 7 minutes 7 min Practice Assignment: Practice quiz – Five questions on network protocols . Duration: 30 minutes 30 min Discussion Prompt: Networked software . Duration: 30 minutes 30 min
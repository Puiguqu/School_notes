# Client side interaction
Video•
. Duration: 2 minutes
2 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/2xVMr/client-side-interaction

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Modern web sites, are not simply collections of information that we read passively, we interact with them. How does that interaction work? The oldest form of interaction on the web is links. You load up a web page which might contain links to other pages, when you click on a link, it sends another request to the same or a different server, which generates a new webpage that's sent to you. Links are a fundamental part of interaction in the web. But there aren't enough for modern websites. If you think about the site you're watching this video on, there'll be a menu that leads to other pages and this will mostly consist of links. But what about the video itself? You might want to be able to play it, pause it, and scrub through it. It would make no sense to implement these interactions as links. It will be far too slow to go backwards and forwards, to the server just to pause a video. These interactions have to be implemented on the client. There are examples of client-side interaction. Any client-side interaction is done in your web browser, and is implemented in a language called JavaScript, the language of the browser. Although JavaScript was originally implemented for very simple interaction like playing a video, in recent years it has become much more capable, and much more of the functionality of a website is now implemented on the client side. An example of that is templating, which we talked about previously as a server-side activity. But is now often implemented on the client. Side templates are sent directly to the client. Data [inaudible] from the database separately, and sent to the client independently from the template. It is the client, that combines the template and the data to create the webpage. The advantage of doing it this way, is that the server doesn't have to send whole webpages every time something changes. It just sends little bits of data, and the client updates what the user sees, making the process much more efficient and responsive. Another big advantage is that the output doesn't have to be HTML, and the client doesn't have to be a web browser. A lot of mobile apps use a similar framework. They receive the same data that a web page would, but use it in a different way, to display on a phone screen. Understanding the difference between client-side and server-side processing is a really important part of web development, and something you will learn a lot about, as you continue your computer science degree. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 15.0 Introduction Lesson 15.1 The internet Lesson 15.2 The web Video: Video Web servers . Duration: 4 minutes 4 min Video: Video Client side interaction . Duration: 2 minutes 2 min Video: Video Clusters and clouds . Duration: 2 minutes 2 min Reading: Reading The world wide web . Duration: 1 hour 1h Practice Assignment: Practice quiz – LAMP versus MEAN . Duration: 30 minutes 30 min Video: Video LAMP and MEAN . Duration: 5 minutes 5 min Discussion Prompt: Web clients and servers . Duration: 30 minutes 30 min
# A notional machine: files
Video•
. Duration: 6 minutes
6 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/qCl7Z/a-notional-machine-files

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Let's look at a notional machine for a vital part of any computer system of files. A file is an abstraction of some data. It's a chunk of data on your hard disk that you can think of as a single thing. Even if it's just a collection of bits, when taken together, you can think of a file as a document, a picture, or so. Files on the hard disk are just a load of patterns on the disk surfaces. But the operating system presents us with the abstraction of that raw data which is a set of files sitting in a folder as we're better able to understand that data if it's presented like that. Files can contain data, words, pixels, or audio samples. They also have associated metadata. Metadata is data about data. So it's data about the file. For example, when it was created or who owns the file. The metadata is not part of the file as such. It's stored by the operating system. Metadata is used by an operating system when it's dealing with the file itself rather than its content. For example, if you want to get your recent files, the operating system will only need to look at the modification dates. The operating system might also need to know who owns a file before it allows you to open it. If a computer is shared by many people, it will contain files created by all of them. You might not want other people looking at or editing on one of your files and you almost certainly don't want them to delete it. That is why most operating systems have a permission system that prevents you from opening other people's files. That is a very important feature. But it can cause unexpected errors when you try to open a file, but don't have permission to use it. One important piece of metadata is whether file is locked or not. You'll often have many applications running on your computer. But what if two of them tried to work on the same file? If they both just reading the file, that might be fine. But if they both tried to change the file at the same time, you might get into problems. Both sets of edits might get saved to the file at the same time. Meaning it will get scrambled or corrupted as the editors get written on top of each other. That's why most operating systems have some system of locking files when an application uses them so that other applications cannot open them. When an application opens a file, it will set the locked metadata which means that other applications can also come in. When it closes the file, it unlocks it. One problem that sometimes happens is that an application will crash between opening and closing a file. So the file stays locked and never gets unlocked. That means you can't open the file again. Luckily, restarting your computer normally solves this problem. Being locked is one example of the state of a file. Let's look in more detail at file site. As a file is used by an application, it goes through a number of states. It starts off just sitting on your hard drive in a client state. Not much is happening. When an application opens a file, it's locked. So other applications contacts this [inaudible]. Now, an application can't directly edit the file on hard disk. Programs can only interact with data that's in memory. So to edit the file, the application has to copy it into memory. That now means that there are two copies of the data contained in the file, one in the hard disk and one in memory. The full mass of the two copies might actually be quite different, but for now, let's assume they are the same. At this point, the application might just keep the hard disc file icon and locked until it's finished with the copy that is in memory. But in most cases it will close the file on the hard disk and just work on the data in memory. So the state of a file on the hard disk for most of the time that the application is editing, is that it will be closed and unlocked. But there will be a copy of that file in memory. At the start, the copy on disc and the copy in memory will be the same. But as it is edited, the copy of memory will become different. So once you've edited the file, the state will look like this. A closed, unlocked, an unchanged file on disk and a copy of memory that is changed. If you turn off your computer at this point, the file on the disk won't be changed, and all your changes in memory will be lost. To make sure they don't disappear, you have to save them in the disk. To do this, the application opens the disk file again and locks it. The changes are copied back to disk, and a disk file is closed and unlocked again. We're back to a state where we have two identical copies of the file. When you close the editing application, we go back to the original closed state with only one copy of the data except the contents of the file have changed. If an application crashes between editing data in memory and saving it to a file, the data gets lost. Luckily, most applications now automatically save backups to disk while you're working, so your data can be recovered. Because the file is not locked, while you're editing, another application could open it and changes at the same time. This might happen if someone else is editing it with a file-sharing and syncing service like Dropbox. These changes could be lost when your application saves the copy of the file back to the hard disk. To prevent this, the application will normally check the time of the last modification of the file, which is part of the file's metadata. If this is lighter than the last time that the application save the file, it'll know that something is wrong and give you a warning. Knowing more about the metadata and states of files can help you understand how operating systems and applications use them and deal with some of the problems that come up. In the next few videos, you will learn about how applications interact with files. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 2.1 State Lesson 2.2 Modularity and applications Video: Video A notional machine: files . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – A notional machine: Files . Duration: 10 minutes 10 min Practice Assignment: Files . Duration: 15 minutes 15 min Video: Video Modularity . Duration: 2 minutes 2 min Video: Video Applications . Duration: 5 minutes 5 min Practice Assignment: Practice quiz - Applications . Duration: 10 minutes 10 min Reading: Reading Looking inside applications . Duration: 20 minutes 20 min Video: Video Debugging . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – Debugging an application problem . Duration: 30 minutes 30 min Reading: Reading Modularity and applications – lecture summaries . Duration: 10 minutes 10 min Lesson 2.3 Summary
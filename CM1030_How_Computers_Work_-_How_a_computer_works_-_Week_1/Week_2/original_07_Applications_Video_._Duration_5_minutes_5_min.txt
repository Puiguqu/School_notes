# Applications
Video•
. Duration: 5 minutes
5 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/dtzlA/applications

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Applications are what we spend most of our time interacting with when we interact with computers, the same goes for smartphones and tablets. Even if we call them apps and not applications, they're essentially the same thing. Whether they are word processors, music players, web browsers, video games, or photo editors, when we interact with computers, it's applications we're interacting with. But what is an application like a word processor? A word processor is a piece of software that edits text documents. But how does it work? When we looked at computer hardware, we saw that its split into two parts, memory that holds data and a CPU that performs instructions on the data. We can think of documents as data, the text of the documents. So it looks like the application is the instructions to the CPU. Programmers call these instructions code. I'll tell you a secret, code is stored as bits in memory just like the document and they're stored as files before the application starts. The fact that instructions are just another type of data is one of the most powerful things about computers. The first computers had to have their program wired into their hardware. But because programs are just files on a modern computer, we can easily just download them and run whatever we like. So we have our simplest model of an application. It's a file that contains code called an executable file, which is loaded into memory, together in most cases with another file that's a document. When in memory, the instructions in the code file act on the data in the document file. This is nice and simple, and it's how some basic bits of software work. But modern applications are much more complex. Firstly, the code isn't generally just a single file. We saw earlier that interaction with hardware isn't handled by the application but by a piece of software called a driver. This allows applications to interact with hardware like printers and sound cards without having to interact with the details of the hardware. Drivers are just one example of a software service that's provided to applications by the operating system. Your operating system handles the details of things like writing to files, interacting with networks, or drawing to screen so that each application doesn't have to. So an application is a core piece of code that interacts with other pieces of code. But these pieces of code aren't always part of the operating system. Applications often use standard software modules. For example, if an application wants to interact with service like Dropbox or Twitter, they'll use bits of code provided by these services. These bits of code are called libraries and they work with the application code to make sure that the application can use the surface. Sometimes, the library becomes part of the same executable file as the application. But it can also be a separate code file called a dynamic library that interacts with the main executable file. You might have heard of a type of file called a DLL, probably in an error message. A DLL is a Windows version of a dynamic library. Another example of a library is the user interface library. The code to display buttons, menus, and other interface items is normally part of a library, not the main application code. That saves the application writers a lot of time and makes it easy to provide a consistent interface across many different applications. This is why you see the same types of buttons and other widgets across different applications. They're all using the same user interface library. But the user interface isn't just code, an interface contains a lot of text and icons. The text in your interface will be different depending on which language you speak. It will be very inefficient to try and include all of this as code. The interface icons exist as separate image files and the text in menus is including separate text files. To change the language of an application, you just have to change the text file, not the code. So an application also includes a lot of files that are not codes. There are data that applies to the application as a whole, not two individual documents. These application data files are normally called resource files. Another example of a resource file is a settings file. Often, you will want to customize your application a bit, maybe change the layout of the menus or at least change the spell checking preferences. These preferences are stored in one or more resource files that are specific to you but apply to all your documents. So there were a lot of things that make up an application. The executable code file is the core of the application but it interacts with a lot of services such as the operating system, code libraries that add functionality, and resource files that are used to make the user interface look right or to store preferences. Applications are pretty complex things. But by understanding the components that make them, you can start to understand how they work. Why don't you have a go at looking inside an application, see what files that includes. The application files are often hidden but if you know the trick, you can get to look at them. I'll include some instructions on how to do this in a reading. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 2.1 State Lesson 2.2 Modularity and applications Video: Video A notional machine: files . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – A notional machine: Files . Duration: 10 minutes 10 min Practice Assignment: Files . Duration: 15 minutes 15 min Video: Video Modularity . Duration: 2 minutes 2 min Video: Video Applications . Duration: 5 minutes 5 min Practice Assignment: Practice quiz - Applications . Duration: 10 minutes 10 min Reading: Reading Looking inside applications . Duration: 20 minutes 20 min Video: Video Debugging . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – Debugging an application problem . Duration: 30 minutes 30 min Reading: Reading Modularity and applications – lecture summaries . Duration: 10 minutes 10 min Lesson 2.3 Summary
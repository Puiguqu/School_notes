# Introduction: What does code really do?
Videoâ€¢
. Duration: 4 minutes
4 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/vZoRm/introduction-what-does-code-really-do

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key One of the most important skills you're going to learn as a computer scientist is programming. Essentially, this means writing code that makes software work. You may have been programming for years, or you might just be taking your first steps as you do this course. But you've probably already written your first few programs. At the very least, you might have written a program that looks a little bit like this, which simply animates a moving dot that goes across the screen. How does it work? How does the software make this happen? Let's go and have a look at the code or at least a bit of the code. So, this is some JavaScript code using p5.js. This does pretty much the same thing as the program I showed you. These bits of code here make the code happen every frame so that the circle seems to move from frame to frame. I'm not going to talk much about them. Let's have a look at this core bit of code and think about what it does. This line of code takes a variable called i and adds the value 1 to it. So, this is a very important thing. Essentially, you have got a bit of data stored in memory, and you're changing its value. This process happens in lots of programs. Now, this bit of code draws a dot based on the value of the variable. So, the position of the point will depend on that value. This is a classic p5.js type of interaction. This is an if statement. An if statement makes a choice. So, for example, if the variable i is equal to 100, it will do certain things. In this case, it will set i back to zero. If i is not 100, that won't happen. The code will just move on to drawing the dot. If statements are really important ways in which program is able to control what happens in that program. Overall, what this program essentially does is add 1 to i and then draw a point. So, that point is gradually moving to the left because i controls how far left the point is. When it reaches 100, which is the edge of the screen, it will move back to the beginning. This is a very, very simple program. What we've just done is trying to understand how that program is worked by going through the code line by line. However, we've done that at a certain level of abstraction, the level of the programming language. We haven't thought too all about any lower levels. But we know that all of the software will essentially run on the CPU, and there will be instructions happening on that CPU. Most of the time, you just need to think about the level of the programming language. It's how you understand the program and the knowledge you need to be a programmer. But sometimes, it's useful to be able to think about what happens at the level of the CPU. What I want to do in this topic is really guide you through and think about what's actually happening in the hardware when you run a program. Before we do that, I just want to say one thing. This program is written in JavaScript. JavaScript is a complex, powerful, and modern programming language. It runs inside your web browser. What actually happens underneath the hood of JavaScript is extremely complex. So, what we're going to talk about in this topic is a much simpler language that is much closer to what actually happens in the CPU. That language is called C and looks like this. You're probably thinking that it doesn't look very different. It happens that the syntax or the look of C is very similar to JavaScript. But, actually, what's happening under the hood is very different because it's a very simple language in which the instructions are converted almost directly into things that happen on the CPU. Going forward, we'll be looking at a program a lot like this one and trying to understand what really happens behind the scenes on the CPU. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 7.0 Introduction Video: Video Introduction: What does code really do? . Duration: 4 minutes 4 min Practice Assignment: Motivating problem: What does code do? . Duration: 20 minutes 20 min Discussion Prompt: Fast and slow software . Duration: 10 minutes 10 min Lesson 7.1 Computer architecture Lesson 7.2 Machine language and execution
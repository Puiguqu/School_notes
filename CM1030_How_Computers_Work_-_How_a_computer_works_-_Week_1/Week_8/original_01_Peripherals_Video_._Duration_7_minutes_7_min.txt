# Peripherals
Video•
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/kkWAg/peripherals

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key So, we've been talking about how a computer consists of a CPU and memory, but we've already seen before that a computer is much more than that. It includes screens, keyboards, hard disks, sound cards, and lots of other devices that are connected to the CPU and memory. We call these devices peripheral devices, which means they're not the core of the computer. They're attached at the edges or the periphery. These devices might be in the same box as the computer, like in the case of a hard disk, or they might be in a different box, like a printer. Some devices such as a keyboard and screen are part of a laptop or smartphone but are separate on a desktop. Whether they're in the same box or not really doesn't matter too much. So, how do these devices fit into our model of a CPU and memory? The CPU and memory communicate via the bus. This is like the central highway of the computer where all the data is transferred. The great thing is that it can also be used for peripheral devices. So, displays and keyboards connect to the bus, and data is transferred in a very similar way to data transferred in memory. It's a little bit more complicated than that because in between the actual device and the bus is something called a controller. That's a bit of hardware that decodes what's happening on the bus and sends it down to the device. Now, these controllers can be really complex. So, for example, a graphics card that will control your screen has its own highly powerful processor called the graphics processing unit or GPU. These are extremely optimized bits of silicon and have a whole computing model which is completely different from the CPU. They are parallel programming chips which can produce graphics at great speed. So, if you look at the amazing 3D graphics we see in the latest games, it's all down to the complex processing that's going on inside your GPU on the graphics card. So, that's a very specialist bit of control hardware. On the other hand, a keyboard is plugged in using USB, which is a type of controller that can handle many different types of device. The acronym USB is short for universal serial bus. You'll probably have seen a USB cable like this one. It is what devices use to connect to a USB controller inside your computer. USB supports a whole load of devices, whether it's a hard disk or an external sound card, almost anything that you plug into your computer nowadays is plugged in via USB. Now, that doesn't mean USB has to be simple. It's quite a powerful controller, but it's also a very generic controller. USB allows data to be transferred between the CPU and devices in a way that's independent of the details of the exact device, and that's what makes it really powerful. I only need a couple of USB slots on my computer and they can connect me to almost any device I want to use. Some devices aren't even connected via wires at all. We have wireless headphones, wireless keyboards, and wireless mice. These normally use a protocol called Bluetooth which is similar to WiFi, but at much shorter range and designed not for communicating over the Internet but for communicating between peripheral devices and your computer. It works exactly like a controller, and you have a Bluetooth controller inside your computer that connects the main bus. It's just that the Bluetooth controller isn't connected to your device using a wire. It has its own little wireless transmitter that communicates with your devices. So, how do devices communicate with the CPU? As I'm typing on my keyboard, the CPU will normally use a type of load instruction to request data from it. This sends a signal along the bus to the controller. The controller will then send the character I typed back along the bus, and it will eventually end up in a register, probably going via memory. There are various ways that CPUs can access peripherals. Some machine languages have specialists commands for accessing their peripheral devices. Most simplify this by having something called memory mapped IO. IO is short for input and output. What that means is that my keyboard controller or at least my USB controller has a memory address, just like my main memory. If I try to read from that memory address, what I will get is the last key that was typed to my keyboard. That's really useful. I don't need another set of instructions to interact with each particular piece of hardware. All I need to use is load and store, and my CPU can communicate quite easily with devices. So, I might load data from my keyboard and then store data to my graphics card. Some devices will allow two-way communication to both load and store. Let's look at another example, a hard disk. If I want to get data from a hard disk into memory, for example, loading a file, the CPU might have to do a load instruction from the hard disk to move data into a register, and then a store instruction to send it to memory. Because my file might be several megabytes in size, it will be doing lots of loads and lots of stores. That will keep my CPU busy for a long time, so it's not a very efficient way of doing things. That's why most modern computers have a system which allows certain devices like a hard disk to communicate directly with memory, and this is called direct memory access or DMA. DMA enables you to have faster access to the devices like hard disks without clogging up the CPU with a lot of loads and stores. Now, you've seen some simple examples of how some devices interact with your CPU. One thing I want to mention is that you need to be aware that some processes are a lot faster than others. So, in the CPU, you can essentially access your registers instantly. Access to those registers on the CPU is scarcely slower than doing the calculation itself. Accessing memory takes longer as it has to go along the bus and come back. So, if you're waiting for a bit of data from memory, then you'll have to skip a whole lot of instructions before it gets to the CPU. If you try to get that from a hard disk or other device, it's even slower. Generally, communication with peripheral devices will be many times slower than memory and certainly much much slower than registers or cache. So, when you are trying to understand the functionality of a computer, you really have to understand that a lot of the slowdown that might be happening is actually due to how slow it is to access memory and how slow it is to access peripheral devices. Luckily, a lot of the time software can execute other instructions while it's waiting for memory, but there were times when it can be blocked and it just has to have that data before it can do anything else. So, the speed of your memory and devices is a really critical feature of how fast your computer will actually run. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 8.1 Communicating with devices Video: Video Peripherals . Duration: 7 minutes 7 min Reading: Reading Communicating with other devices . Duration: 1 hour 1h Practice Assignment: Practice quiz – Devices . Duration: 30 minutes 30 min Video: Video Case study: virtual reality . Duration: 8 minutes 8 min Discussion Prompt: Fast and slow software . Duration: 30 minutes 30 min Lesson 8.2 Summary
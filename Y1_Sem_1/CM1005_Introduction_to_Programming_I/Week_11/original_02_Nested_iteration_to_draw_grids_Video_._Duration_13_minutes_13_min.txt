# Nested iteration to draw grids
Videoâ€¢
. Duration: 13 minutes
13 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/GkKDA/nested-iteration-to-draw-grids

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key In this video, we're going to address the topic of nested iteration. Now, this is a technique which confuses practically everyone the first time they encounter it. But hold tight, with a little practice you'll come to understand it, and then you find that it's a really powerful technique with many applications. Now, so far we've been using four loops to draw rows and columns of things, and I've got an example here, which should look pretty familiar to you. I'm using a for loop to draw a row of ten ellipses like so. Now, so far, if you wanted to have say, three rows of ellipses, what we would do is we would copy and paste the for loop, so I'm going to do this now. Just sort out the formatting there. And what we also need to do is we would need to adapt some of the values to make sure that all of those rows were visible. So specifically, we need to adapt the y-value here to make it different in each for loop. So this one is 30, so I'm going to make this one 60 and this one 90. So that should make three rows at three different heights. So let's save that and see if it works. Great, we've got three rows. Now, every time you copy and paste code in this way, you should ask yourself, is there a better way to do this? And in this case, there certainly is. It's the nested for loop. So I'm going to show you how to use this now. So I'm going to delete these extra rows. Actually, I'll just comment them out for the moment. And if we think about this, we've got a pattern here. So our y argument here went 30, it went 60, and then it went 90. So that means we've got a pattern because it goes up by 30 every time. And we can use that to construct our nested for loop. So what I'm going to do is I'm going to make a second for loop, but it's going to be slightly different from before. I'm going to make it with a new variable, and in this case I'm going to use the letter h. So this way, visualization, and for my condition, well, I want three rows, so I'm going to make my condition h < 3, and my off default. Now, when it comes in the brackets, instead of putting brackets like so, I'm actually going to make the second bracket enclose that original for loop. So what we now have is a for loop within a for-loop. So it's what's called nesting. And just to show you this more clearly in the code, I'm going to do the conventional thing, which is to indent that original for loop. Now on Mac, I can use a hotkey to do this. I'll use command and closed square brackets. And you'll find a similar command on our Windows machine. Okay, so now we can see that nesting really clearly. So what will happen here in the flow of the program is that we'll start the first for loop. And then immediately, we'll do ten iterations around this inner for loop. And once they're done, we'll go all the way back to the top. And h will become 1, and then we'll do another ten iterations here in this for loop. And then we'll go all the way back to the top and now h will equal 2, and we'll do another ten iterations before we reach the end. Okay, so we're nearly there but we need to get this pattern that we observed in the y argument where this value ends up by 30 every time. Well, we've done this with i here, so we can use h to achieve this for the y-value. So I could go 30 + h here. That's not quite enough, because that would make the values be 30, then 31, and then 32, respectively, and that won't really shift the rows properly. So what I need to do is multiple age by a number here, and the number I'm going to multiply it by is 30, and that will space out rows just as we did before. So if we go and work for this, we should have a value of h as 0. Well, that means that we've got 0 times 30, that's 0. So our first iteration will have a y-value of of 30. The second iteration, h is going to be 1. So then 30 plus 1 times 30 is 60. So this row will be drawn at 60 and then when h equals 2, we're going to have 30 plus 2 times 30, that sum equals 90 and so we'll draw that third row at 90. Okay, so I can delete this commented code now. Let's save it and see what we get. And there we go, we've got three rows of ellipses. We could try some experiments now, maybe we want to try and space these rows out further. So can you work out which number you need to change to space them out further. It's this number here. So we were spacing by 30, l am going to space them by say, 60, and there we go. We can see our ellipsis spaced by 60. I might want to space some of the other ways as well. So l could change the corresponding one in the x argument. And now we've got our ellipses spaced like this. Now of course once we've done this, we can also draw many more rows by just changing a single number. So whereas before we had to start off with cutting and pasting, this has now become a very easy operation. So we had three rows, I think I want ten rows. So I just put 10 there. Now, here's a fun trick that you can try. We can use mouse X and mouse Y to control how many rows and columns there are. So let's start with mouse Y. So this one, this for loop is actually determining the rows. So I use mouse Y here, the greater the value of mouse Y, the more rows I am going to draw. So instead of putting 10, I'll just put mouse Y. Now the thing about mouse Y is it's the pixel value so it's going to very quickly get into values of hundreds. So rather than that, I need to scale it somehow. So I'm going to divide mouse Y by a number. And in this case, I'm going to choose the number 60 because that's how I've spaced my rows anyway. Let's see what happens now. So you can see, when I move my mouse on the screen, I get more rows. Okay, let's try it with columns. So here I've got ten at the moment. But I'm just going to copy the same pattern I just did. So I could do mouse X, and again, I could scale it by dividing by 60, and let's see what we get. Okay, so now we've got a grid of ellipsis that moves with the mouse. So that's one experiment. You could try some other experiments with this, maybe changing the size or changing the colors or adding random values. But you might still be a little bit confused about how these nesting for loops are really working. So I'm going to show you it in a slightly different way now so that we can get a really good understanding of the flow of the code. So I'm going to put these back, I'm going to have ten columns and three rows, just to keep it really simple. I'll also comment that this is the columns. So there they are our ten columns and three rows. Okay, so one thing we could do is draw out the values of h and i to see which ellipses are being drawn for the corresponding values of h and i. So I'm going to use the text command to do this, and I'm going to put h =, and then I'll make the string the value of h and then I will put, that same input, i = and add the value of i here. And then we need to work out where the position of this text is. Well, actually that's easier than you might think, all we need to do is copy and paste the code, which positions your ellipse. And that will just put the texts roughly where the ellipse is. Okay, we've got one more thing to sort out. We need to sort out the color and so we want the ellipse to be purple but the text to be white. So what I'm going to do is I'm going to copy and paste this fill command to make the color purple every time we draw an ellipse. And then I'm going to put a new fill commands here that sets the color to white for drawing the text. Okay, now we're ready. So if we look at the output, we can see that for each row, the value of h is the same. So it's h = 0, all the way along this row. But the value for i changes, it goes 0, 1, 2, 3, 4, all the way up to 9. And if we think about how the code is working, that makes sense because we start with the value of h is 0, and then we go, i is 0, i is 1, i is 2, i is 3 and it's the i value that shifts that ellipse across the screen. And once we draw one whole row like this, all the way to the end, h changes, h goes up by 1 and that means that the next ellipsis is going to be drawn further down the screen but we start at 0 with i again, and we move across. So even if we were to see this drawn in slow motion, this ellipses would be first and it would work all the way along to the end of the row, and then it would draw the next row, and then the third row. Another way we can see this process happening in the code is to use the debugger, that exists in the Chrome console. So what I'm going to do is, I'm going to open the console. And we're going to use a new part of the console that we haven't explored before, and that's called sources. So here's the regular console that you would've already seen. If you click on the Sources tab, you'll see more different code files here. And so select sketch.js and you'll actually see the code that you've written. Now what you've got here is you can click in this left hand column, and you can set what we call break points. That's point where the code is going to stop running for a moment. So I'm going to make one at line 14 here which is the beginning of where my for loops are. And then I've got these buttons down here. And this controls whether I'm running the code or whether it's stopped. So I can press the button, and the code will run as far as it can until it reaches one of these break points, and then it will stop. And the line will be highlighted as we can see. I've then got a second button, which is called step over. And this button will just move one line at a time, so that I can really see how the program is running. So in this case I'm going to hit the step over button and we can see then, once I've stepped over, the h is 0 and the next line of code to execute is per second in a for loop. And if I do that one, we can see now i is 0. And if I click through, we can see all of these commands happening and we can see this loop happening ten times. And I'm just clicking all the way through, and we can see the values of i changing, and here we come to the final ones, that i is 9 and then it goes back to the beginning of this for loop. But this time it will jump back to the outer for loop because i then was 10 and the for loop shouldn't continue. And here now we see that h is 1 and now this will step through, again ten times. And then once it's done, here it comes, we'll see that we jump back to the outer for loop and now h will be 2 and we'll do it ten more times. So try this out for yourself. Really experiment with this code to really get your head around how the code flow works, and how this nesting works. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 6.1 Advanced work with arrays Lesson 6.2: Nested Iteration for drawing patterns Video: Video Nested iteration to draw grids . Duration: 13 minutes 13 min Practice Assignment: Nested iteration to draw grids . Duration: 15 minutes 15 min Video: Video Being creative with nested iteration . Duration: 10 minutes 10 min Reading: Reading Code it from scratch: Warhol soup . Duration: 1 hour 1h Discussion Prompt: Warhol soup . Duration: 20 minutes 20 min Lesson 6.3: More work with arrays Lesson 6.4: Debugging techniques
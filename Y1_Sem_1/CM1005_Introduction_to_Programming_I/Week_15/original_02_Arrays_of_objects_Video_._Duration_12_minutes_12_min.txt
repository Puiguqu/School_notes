# Arrays of objects
Videoâ€¢
. Duration: 12 minutes
12 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/BLRsK/arrays-of-objects

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key We've been using arrays and objects for some time now. But you might not have realized quite how powerful and flexible these data structures are. This is what I'm going to demonstrate in these next two videos. The first technique might already be familiar. You've probably used it in some sleuth puzzles and also some parts of the game project. We're going to make an array full of objects. So I have some example code here, which you can also download and code along with me. If you run the code what you see is that we have a car which moves along a road. Looking at the code, we can see but we have a car object here that has an exposition, a height, a length, a wheel diameter, and a color. So these are all things that we can adjust in the car. If you look into the draw function, you will see but actually we pass our car object into a function called render car. This does all the drawing of the car. I'm not going to go through that part in detail. If you're interested in understanding how the car is drawn, you can explore that code yourself. But really all we need to understand is that render car, takes the car object as an argument, and it draws the car. The other thing we're doing is that we are incrementing the X position of the car to make it travel along the road, and at the point at which it gets past the edge of the screen, and then an extra 500 pixels. So it's really gone quite far off the edge of the screen. We flipped the position back to minus 500 pixels. So it goes to an off-screen position and eventually it will make its way back to the start of the screen. So this is going to allow us to create an endless stream of traffic in the end. So you can see there that now my car has actually arrived back at the start of the screen. If we were to wait we would see it get all the way off the screen and then eventually appear at the starts again. So what we want to do is we want to create lots of cars and we want them to be lined up in a traffic jam. So the first thing we're going to need to do this is to make an array. So I'm going to do it in two ways. I'm going to do it in a simple way, and then I'm going to do it in a more advanced way. So in addition to my global variables I've got here, I'm going to make an array called traffic. I will initialize this in my setup function. Now, what I'm going to do is I'm just going to copy and paste the car object a couple of times into that array. So here it is once. I'll put a comma and here it is again. I think I'll go with three cars at the moment. Here it is one final time. Now, if I was to use these cars at the moment, you've notice that the position of the cars is exactly the same. So we would only really see one car drawn. So I'm just going to spread these out. So I'll make if the first car is 200, I think the next one could be, well let's take a guess, let's say 400 pixels away, and then the next one would be 600. So our cars should now be spread out to some degree. Now I no longer need this car objects. So I'm going to comment this out and I'm going to comment out my global variable called car. So we need to do a few more things into individual function to make this code work. So in order to render the different cars, I need to traverse through my array called traffic. So to do this I'm going to use a for loop. I'm going to say, for var i equals zero. I is less than traffic.length. You remember that's the number of items that are in traffic. So this loop will happen three times. Then my afterthoughts is to increment i by one. Then going to put my curly braces and make sure that the render car cool, is inside those curly braces. So then what I need to do is I need to instead of using car, which was that global variable that I've just commented out, we need to use the object from traffic at the particular index. So I'm going to say traffic at the index i. This code here that uses car isn't currently going to work. So I'm just going to get rid of that code and hopefully we should see three cars there. Let's deal with actually making the cars move now. So I'm going to take this commented code and I'm also going to put it in my for loop here and I'll uncomment it now. So wherever we're using the object car, actually we're going to use traffic at the index i. So this one will be traffic at the index i, and we're adjusting the property X, and we get the same pattern here, and the same pattern here. So now, I can delete this code that I commented out. Now, we can see that our cars are moving along the screen. So that's one way to set up an array full of objects and to use them. I'm going to show you in a more advanced way now and it's going to allow us to make many more cars more easily, and it's going to allow us to introduce some variation as well. So you could imagine if I had to have a 100 cars, this technique of copying and pasting objects into the array at the point at which we initialize it, would be quite cumbersome, and it's not necessary. We can actually use a for loop instead. So what I'm going to do is I'm going to delete all of these cars from my array now, and I'm going to create a for loop. I think I'm going to have 10 cars. Then what I'm going to do is I'm going to create an object called car, but I'm making it as a local variable. So I just copied and pasted that old code that I had. Then finally what I am going to do is I'm going to push that car object to the end of the array. Now, at the moment all the cars are in the same position. We'll deal with that problem shortly. But first I just want to try this out on us to have a look at the array that we've created. So we only see one car because as I said, they're all in the same position. But if I open the console and we have a look at traffic, we can see that there's 10 items there. At the moment they're 10 identical items but we're going to deal with that right now. So I want these cars to be perfectly spaced out nice and evenly. If we look at this code here, I am using not just the width of the screen, I'm using 500 pixels more on one side, and 500 pixels more on the other side. So my total distance of road that I'm using is width plus 1000. What I'm going to do is I'm going to try and work out how these cars should be spaced so that they're really evenly spaced, and I'm going to do this using a variable called inc. That' shows the increments. So I know I have a total distance of width plus 1,000, and I know I have 10 cars. So the way to work out what the even space between the cars should be, is to take that total distance and divide it by 10. So let's have a look in the console or what that value actually is. I'm going to do a console.log. We can see that our cars should actually be space 220 pixels apart. So to do this, instead of putting 200 height of the exposition, I'm going to put minus 500. Because that's where the cars stop furthest to the left, plus inc, which is 220 multiplied by i. Now, this should get my cars perfectly spaced out all the way across the width of the screen. Let's see if it's worked. So there we can see our nice line of traffic spaced across the screen. So the next thing to do is to introduce some variation. Because now we've set this structure up. We've done the hard work, but now we can have some fun with it. So let's look at what we could change. Well we could change the colors of the cars for starters. So actually I will space this out on to separate lines now. Inside this color object here, I'm going to use the random function to generate some random colors. So I'll say, random between zero and 255 for both for the red value. The green value, and finally the blue value. Now, we can see we've got some random colors in our cars. We could also maybe changed the heights. So let's have, let's see, we had a height of a 120. Maybe we take that as a lowest because it looked quite low already and I could go random from a 120 up to 300. Let's see how that looks. They all look quite tall maybe I'll go a 120 just to 200. That looks a bit more reasonable. I think I could also just the wheel diameter. So currently we've got 80, they look quite big. So maybe I'll go from random, from 40 to 80. You can see we now have lots of different types of cars moving along in a traffic jam. Now, you could extend this. Maybe you want to make the cars move at slightly different speeds. May be you want to make a set of traffic lights that stops all the cars, and then goes green and allows them to move. Have a play with this see what you can do. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 8.1 Two dimensional arrays Lesson 8.2 Nesting objects and arrays Video: Video Arrays of objects . Duration: 12 minutes 12 min Video: Video Complex object properties . Duration: 12 minutes 12 min Practice Assignment: Nesting objects and arrays . Duration: 15 minutes 15 min Lesson 8.3 patterns
# Complex object properties
Videoâ€¢
. Duration: 12 minutes
12 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/A7vUR/complex-object-properties

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key So, we've seen that arrays can store objects. Now, let's flip things the other way around. Let's look at objects whose properties are arrays. So, I've got some example code here and you can download that and code along with me. If you run the code, you'll see that it draws a kind of a school bus. Looking at the code, you can see that there's an object for the bus. It has an x position, a length, a height, a wheel diameter, and a position for the driver. We'll talk about that shortly. If you look at the draw function, you can see that the bus is drawn in the function itself, but as we scroll right down to the bottom, you can see that there's another function call and I've created a function called drawPerson, so that's what's actually drawing the bus driver. You can see that it takes two arguments. It takes a position for the center of the person, and it takes the y position of where the person should be. So, going back to that property for where the driver position is, you'll see that it is not the number that you might be expecting. It's not a number of a pixel that might be in the hundreds, it's a decimal number. What I've done is I've treated this number as a relative proportion of the length of a bus because that's quite helpful when we're trying to work out positions. But, you'll also notice that there's a little bit of code here that then translates that position back into a pixel value and my drawPerson function expects a pixel value, and that just is because it allows for good encapsulation. I don't really want this drawPerson function to expect to know the length of the bus. So, this allows this function to be independent from the bus. The first thing I want to do, is I want to add some passengers to the bus, and I'm going to do this by adding to the bus object itself. I'm going to add a property called passengers and this is where we're going to nest an array inside the object because I'm going to have multiple passengers. So, I simply do this just by putting the two square brackets for an array after the passengers' property, and these passengers are just going to be defined by their x position currently. So, if we've got a driver position of 0.15, well, let's say that might be 0.4, and then I'm going to go 0.5 and 0.6. So, we're going to put in three passengers. If we were to look at our bus in the console, if we look at the bus object, and I open this up, we can see there's our three passengers as an array. The next thing to do is to actually draw the passengers, and to do this, we're going to need to traverse that passenger array at the end of this drawing function. So, I'm going to use a for loop to do this. For var i equals zero, i is less than, and now we get to the tricky part. We have an object called bus, we're using the property passengers, and that is an array, so we can use the length property of passengers to determine how many times we need to iterate. Finally, I put in i++. Now, for each passenger, we're going to need to work out what's the exposition is in pixels, and for that reason, I'm going to copy this code into here, and now I've got to adapt it. So, instead of using driver_pos_x, I'm going to use bus.passengers[i], and then that's it. Finally, I need to make the call to a draw person. So, I say drawPerson, and it's basically the same as we did for the driver. I go centerPos_x and basePos_y. If we look now at our output, you can see that there are three passengers there. This is a simple way of putting an array in an object, but now I'm going to look at something a little bit more complicated. What we're going to do, is we're going to make each of these passengers into an object themselves, but before we do that, we're going to start with the driver. I'm going to make an object this time for the driver, and the driver's going to have an x position, so that would be 0.15 still, and we'll just start with something simple. Let's give the driver a height. I think we can manage that. I'm going to make up a number for a moment and then we're going to need to look at that drawing function to work out what the correct number might be. If I look down here at withdraw person function, we can see that we start by drawing a rectangle and the height of that rectangle is 80. So, wherever 80 is that is where we are adjusting the height. I am going to do this in two stages. The height will be 80 here, and now, instead of having a driver_pos_x value, I'm going to just change this over to regular driver and I'm going to leave this as undefined at this point, and here I can say bus.driver equals driver, and that will copy that value. Now, I'm going to need to just comment out this passengers' code for the moment because this won't work, whilst we're doing this. I'm going to add an extra argument to drawPerson. I'm going to add attributes. So, when we draw the driver, we're going to add bus.driver. We're going to pass through that object, and that will be passed through to this argument attributes. So, wherever it says 80, we now put attributes.heights. I might just use copy and paste to do this. So, let's look at the result. We seem to have had a problem there. I know what it is. So, we're still using driver_pos_x, but as you might remember, we changed things here. We gave the driver a property called x. So, I'm going to need to adjust that as well. Bus.driver.x, and now we can see our driver again. Now, we're ready to start making some new types of passengers that are a little bit more complicated. What I'm going to do is, I am going to empty this passengers array, and I'm going to make a for loop. I think I'm going to have five passengers, and for each one, I'm going to make a passenger object. I'm going to need an exposition. We'll deal with what value to put in there in a moment, and I'm going to make a height. The heights we want to be different for each passenger, so I'm going to use random. I'm going to say, well, 80 is quite tall, so I'm going to go from 40 up to 80, and we'll see what that does. For the x position, I need to do something different. I know that it roughly starts at 0.4 and it goes up in increments of 0.1. So, I can go 0.4 plus i times 0.1, and that will spread my passengers out. Now, the final thing we need to do is we need to add those passengers to the passengers array, so I put bus.passengers.push and I push the passenger back. Let's have a look in the console and see what kind of bus object we've created now. If I open this up, you can see that there are five passengers, and if I look down, each passenger has a different x position and a different height. Now, what I'm going to do, is I'm actually going to draw those passengers, so I go back to my code here and I can uncomment this, but instead of just putting calculating the x pos like this, I need to say bus.passengers at the index i and then extract the property x for the position. Also, I need to pass in the bus passenger objects now to this adapted function. We pass in the passenger at index i, and there we can see a school children on the bus. If I refresh it, you can see that they come out at different heights each time. Now, you might want to add some more variation yourself. Perhaps you could adjust the width of the passengers, maybe give them different colors. You could give them different haircuts. I leave the rest to you. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 8.1 Two dimensional arrays Lesson 8.2 Nesting objects and arrays Video: Video Arrays of objects . Duration: 12 minutes 12 min Video: Video Complex object properties . Duration: 12 minutes 12 min Practice Assignment: Nesting objects and arrays . Duration: 15 minutes 15 min Lesson 8.3 patterns
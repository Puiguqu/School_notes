# Methods: Objects which can do things
Videoâ€¢
. Duration: 8 minutes
8 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/32PCx/methods-objects-which-can-do-things

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key In this video, we're going to build upon our knowledge of functions and objects and bring the two ideas together. We have created a lot of objects that look like the one on the slide. It has a range of properties which we can use to meet an Apollo program and keep the ideas about a single concept all in one place. This is clearly better than creating a lot of variables about the same thing. Now we are going to extend our objects to not only contain properties but also to contain functions as well. When we put functions in an object, we refer to them as methods. So, your objects are made up of properties which are the attributes or the thing you are trying to model, and methods which are the things the object can do. This could be to draw itself to the screen, update values or iterate over an array of properties. Firstly, we'll take a look at the syntax but then we'll get straight into a proper coding example. Most of this should be familiar. Although much like properties the methods we are creating require slightly different syntax than you are used to. The name of the method is specified before the colon. This can be anything providing it follows the rules for naming variables and functions. Then after the colon, we use the function keyword followed by open and closed parenthesis or curved brackets. If that's what you prefer to call them. If you want to include parameters, you do so in these parenthesis exactly the same as a regular function. We then have the body of the function and this is enclosed in braces or curly brackets. This is where you write the code your function does. In this case, some simple drawing code but it could be anything, and don't forget that methods can return values just the same way functions can. When you want to call the methods of your objects, you use the same data operator we have used for properties. The name of the object followed by the name of the method, but we need to include parentheses at the end to set any values we may need in the function as arguments. Accessing the properties of your objects from within this method can be a little tricky. So, I'll leave that until the next video and we'll just focus on writing simple methods that don't rely on the properties for now. Let's look at a coding example. So, let's look at writing some methods into a simple object. So, here I've got a kitty object which is drawing this nice cat picture to the screen. It's built up of various shaped objects very similar to the kinds of things you would have been doing in the game projects for example. So, what I want to do to this kitty object is to add in a method. So, what can cats do? Well they can say meow. So, let's add in a method that will make the cat say meow. So, we need to give it a name which is meow, and it's going to be a function and to start with we want any parameters but we will come back to that in a little bit, and then we do our curly braces or brackets and we are going to just simply output to the screen some text which is meow, and we will just put this for now. Let's put it at halfway across the x coordinate. So, that's the width divided by two and we'll just put it at 400 on the y. Now we need to just adjust the renderings that we'll need to say a fail because we've already made some changes to the color for the cat. So, let's set this to black and the stroke to black and the stroke weight to be one, so, hopefully that should now just write to our canvas nicely. So, if I save that nothing will happen let's just check our inspect to make sure we haven't made any mistakes. Now you would have this little arrows popping up. No, we're looking good. So, to make this cat actually invoke this action, we need to call and the meow function say from within draw, let's do it at the bottom of the drawing. Say let's write a little comment for speak and let's call the meow function. So, we need to use kitty which is the name of the object followed by the dot operator and look at this brackets as suggested what we might want to put after this X, Y or meow, we want meow, and open and close parentheses we're not providing any arguments and finish with a semicolon. If we hit save. Hopefully, oh! No. It is saying meow but I've placed it very badly. So, let's just move that down the canvas a little bit, and then we can see it. There we go. So, it's a little small and we can make that a little bigger. So, text size let's make that 30. So, we've now got a method inside that object which is, I'm writing meow out to the screen, let's make this a little bit more flexible. I had a bit of trouble setting that in the right location. So, let's make that parameters. So, let's have parameters that are going to set the position of the text. So, let's call this xPos and yPos. Probably not a good idea to use x and y here because we already got them for the properties of the cat objects the kitty object. So, let's make it a little clearer by doing that and let's revise this, so, is xPos, and yPos and then down at the bottom here we need to specify these values. So, we had width divided by two and I think it was 450, so save that, all looks exactly the same. So, now we are using these parameters correctly, and the great thing about using parameters that means that I can call it more than once and write that word in different places. So, let's try putting it somewhere else. Kitty meow. Sorry, we need the dot operator meow, open our brackets and we need to specify two values. So, let's just make this at say 10, we'll also have at 450 again and let's save that and there we go, oh it's disappeared off the edge level, but there again. We can use methods in a similar way that we can with functions. We can use them multiple times say just by recalling them, we can run the same function again and again, and in doing so we've created a nice little sketch where we can have the cat speak as often as we like. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 9.1 Methods Video: Video Methods: Objects which can do things . Duration: 8 minutes 8 min Video: Video This: making objects refer to themselves . Duration: 10 minutes 10 min Practice Assignment: Methods . Duration: 15 minutes 15 min Reading: Reading Hack it: Rocket . Duration: 1 hour 1h Discussion Prompt: Rocket . Duration: 20 minutes 20 min Lesson 9.2 p5 vector - static and non-static methods
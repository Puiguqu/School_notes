# Code philosophy: asking for help
Videoâ€¢
. Duration: 5 minutes
5 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/uTcr6/code-philosophy-asking-for-help

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key [MUSIC] In this topic's code philosophy, we're going to be talking about how to ask questions. We have established that coding is a tricky thing to do. You'll run into bugs and problems as you code. Maybe you'll get stuck with a particular bug. You only have to work out the right command or you got stuck on a tricky maths problem. Luckily it's a challenge we don't have to take on alone. There is plenty of help out there if you know where to look and how to ask. Coders like to help one another out. If they have hit upon a difficult problem or have worked out a new technique they might want to share their experiences online. Perhaps they will blog about it, upload a tutorial video, or they are able to answer questions about similar issues on coding websites, such as the popular site Stack Overflow. Or you can use the introduction to programming forum. There is an art to asking the right question. A sweet spot between asking a very general question that will only receive an equally general answer, and a question so specific that it won't overlap with others' prior experience. This is true whether you are asking a person or a search engine. Let's start by looking at the wrong kinds of question to ask. A bad question might be, this doesn't work, can you fix it? There are lots of things wrong here. Firstly, What does it mean for something not to work? Does the program not load? Is there nothing displayed to the screen? Has some error been produced? As well as being specific about how the problem manifests itself, you also need to be specific about what it is you're implementing that is causing the issue. Perhaps it's a recent change you have made to the code that is stopping it from working. Ideally, you'll be able to isolate the command that is causing the issue. You can investigate this by commenting out any new lines that you added since the program last worked, and then uncommenting each command one-by-one until you have found the problematic command. The worst sin of this question is asking the respondent to fix the problem. Maybe this will give you the answer you need then, and there, but it isn't going to help you to learn what has gone wrong in your program and be able to fix it yourself next time you have the same problem. A good rule of thumb is never just copy and paste code. Try to rewrite the solutions you find online to fit your specific problem. wise, if you are seeking help from a friend or colleague, never let them type in code for you. This next question isn't a good one either. Much like the last one, it still asks for a quick fix. When struggling with errors, always make sure you have a proper look in the console before asking for help. Very often, it will include a line number in your sketch file that will tell you where the problem is. This question is much better. It concisely asks a specific question about an error. It includes where in the program the issue is, the type of error, perhaps on the console,and it seeks knowledge, not just a solution. Be careful not to over specify your question or make it too long or complex. It'll take the respondent a lot of their time to work out what it is you're asking and how to apply their knowledge to it. Here are some tips for asking good questions. Keep your questions short, concise, and focused on the problem. Include what changes you had made just before the error occurred. Check for errors in the browser console, it might tell you where the problem is. When students come to me with programming questions, this is normally the first place I go to. Remember to keep the question focused on the error itself, not the overall program you're working on. Sometimes it can be helpful to try and extract the problematic piece of code into a short snippet in a new sketch. The act of doing this may help you find a solution. If not, it'll be easier to ask for help with a small problem than a whole big program. The answer to the question isn't the end of the process. Maybe there are bits of the answer that you don't yet understand. Sometimes it might be okay to ask a follow-up question, but you might need to look them up somewhere else. It's important to not just take the answer to the question at face value. Reflect on what you've learned. Where else can you use the solution you've been given? Did you learn a new technique or piece of code you haven't seen before? To finish, a quote from Benjamin Disraeli, the fool wonders, the wise man asks. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 2.3: Asking for help Video: Video Code philosophy: asking for help . Duration: 5 minutes 5 min Discussion Prompt: Code philosophy: asking for help . Duration: 20 minutes 20 min Lesson 2.4: Introducing the game project Lesson 2.5: Continuing with Sleuth
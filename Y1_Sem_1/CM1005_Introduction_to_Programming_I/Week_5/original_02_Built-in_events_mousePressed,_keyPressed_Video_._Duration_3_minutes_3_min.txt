# Built-in events: mousePressed, keyPressed
Videoâ€¢
. Duration: 3 minutes
3 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/XWUgW/built-in-events-mousepressed-keypressed

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Hi, we're going to be looking at more usual events in this video. So if you go back to the follows up application, we made last time, if it's running, you should see a white spot that follows the mouse cursor around. We're going to extend this program now so that the spot changes color when the user clicks the mouse. So we can do this by adding another function. So we start with the word function, which tells p5 and JavaScript that we're creating a new function. And this one is called mousePressed. Then we put our two open and closed parentheses. And then our curly brackets where we're actually going to put our code inside. It's very important that you call this mousePressed, spelled exactly as I have there with a capital P. That way p5 will know where to look for it when the user clicks the mouse. So what we're going to do is we're going to change the fill from all white to a red color, 25500. Okay, now if we do this, we're going to have a bit of a problem, because if we save it and rerun. We'll see that the mouse is following, but if I push the button, it's not changing color yeah. And that's because we've also got this fill in draw, so each frame is being reset to white. So even though the mouse is being pressed and it should be changing color, we're not seeing it. because it's happening for such a brief period of time. So if we take that fill, and we cut it from draw, and then we add it up here into setup, making sure we have neat indentation, hopefully this time we refresh that, I press the mouse, and the spot changes to red. And it will stay red. Okay, so let's look at one more user event. So we've got mousePressed, let's look at a keyPress. So function, which tells JavaScript that we're writing a new function. KeyPressed with a capital P. This is called camel casing. Say you'll notice that the function starts with a small letter, and then when I've got a new word, even though I have a space in between it, I use a capital letter. And a curly braces, and now let's set the fill here to yellow. So the RGB of yellow is 255, 255, 0. And don't forget our semi-colon at the end. We save that, we run it, so as I move the mouse it's white. I click it, it goes red. If I push the space bar, it changes to yellow. Okay, have a go at this yourself and maybe try some different colors or and different interactions when the mouse is pressed or a key is pressed. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 3.1 Interaction with built in variables and events Video: Video Built-in variables: mouseX, mouseY . Duration: 5 minutes 5 min Video: Video Built-in events: mousePressed, keyPressed . Duration: 3 minutes 3 min Practice Assignment: Built-in variables: mouseX, mouseY and events . Duration: 30 minutes 30 min Reading: Reading Programming exercise 6. Code it from scratch: Drawing app . Duration: 1 hour 1h Discussion Prompt: Code it from scratch: Drawing app . Duration: 20 minutes 20 min Lesson 3.2: User-defined variables and objects Lesson 3.3: Working with variables
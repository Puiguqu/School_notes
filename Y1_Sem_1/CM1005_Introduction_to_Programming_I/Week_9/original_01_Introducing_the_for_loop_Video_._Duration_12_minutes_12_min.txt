# Introducing the for loop
Videoâ€¢
. Duration: 12 minutes
12 min

URL: https://www.coursera.org/learn/uol-introduction-to-programming-1/lecture/CfwCi/introducing-the-for-loop

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key The problem we're going to look at in this video, is how to get our program to do the same thing lots of times. Now you might be thinking, why would we want to do the same thing over and over again. Well for example if you think about game scenes, they often have the same or similar items drawn over and over again. For example this game scene behind. Luckily doing repetitive actions is something that computers are actually really good at. The formula that we use to do this is called a for loop. It tells the computer what to do, and how many times to do it. But it does this in the slightly strange way, which gives us a lot of flexibility, but it's difficult to understand at first. So this is what the basic syntax for a for loop looks like. And you can see that in those round parenthesis there were free sections separated by two semi colons. There's also this curly brackets, and inside the curly brackets is the code for this going to run lots and lots of times. So we could think of that as the action. So let's deal with those free sections, the first section is called the initialization. It happens at the very beginning of the for loop, before the first action has run. The second section is called a condition. This is the bit that's going to determine when it's time for the for loop to end. And the final section is called the afterthought. This happens after every action of the for loop. So once the code inside the curly parenthesis has run, they'll be an afterthought. And then the code inside the parenthesis will probably run again and they'll be the afterthoughts again and so on. Okay, so let's plug some actual code inside this syntax. So if you look at the initialization, you can see that all we've done is set up a variable called i and initialized it to 0. Now for various different reasons, that might not be what you do in your for loop. So for example, you could change the name of the variable. You might call it j or k, or you might call it counter, or anything else that you want. Also you might have a different number. It might not start at 0, it might start at 1 or 5 or 100, but in this case, we're having i = 0. And this is a very standard formulation for a for loop. Okay, I'm going to jump now to the afterthoughts. This is also some familiar code. All we're doing here is incrementing the variable i by 1. So every time the loop runs, i is going to go up by 1. So that means that the loop will start with the value of i at 0, then i will be 1, and then it would be two and so on. And each time a new action will run. So now we can look at the condition. If we look at the condition we can see that the loop will continue running as long as i is less than 10. So can you guess how many times these for loops it's going to run? Is going to run 10 times, because we've got i at 0, i at 1, i at 2, i at 3, and so on untill i reaches 9. And then when we increment i one final time and, make i equal to 10, that condition is no longer going to be met because, i is no longer less than 10, it's equal to 10. And that means that the for loop will stop. So the effect of all of this is to mean that the code in the action is going to run 10 times. Okay, so now you know the syntax of a for loop, you need to practice typing it a lot. By the time you're done with for loops you should be typing them almost instinctively. So now we've looked at the for loop syntax, let's have a go at actually implementing this in code. So I've got an example sketch here that you can download from the platform. If you have a look at it, it's basically just the setup function to start off with. So let's type our for loop. So I'm going to start by typing the keyword for, and putting two round parenthesis. You should try this with me. The next thing I need to do, if you remember, is I need to put in two semicolons to give me three sections. My initialization, my condition, and my afterthought. Let's start with the initialization. I'm going to declare a variable called i, and I'm going to initialize it to 0 in that section. Let's deal with the condition. So here I have to think how many times I want my for loop to run. In this case, I want it to run 10 times. So I'm going to make condition that goes i is less than 10 and that means I will go 0, 1, 2, 3, 4 all the way up to 9 but it will stop when it reaches 10. Finally, I need my afterfought, and I need to think what I want to do with i each time the loop runs. Well, in this case, I want i to go up by one so I go i +=1. Sometimes you'll see this code, i++ and that's just the shorthand for saying i+=1. So I'm going to leave that one there this time. Okay, the next thing I need to do is put two curly parenthesis for my action. When I'm typing curly parentheses, I always tend to type them in pairs. That way you don't forget to leave the bottom one out. Okay, so that's the for loop. But nothing's going to happen yet until I put some code into the action. So I'm just going to start with something very simple. I'm going to use console.log to print to the console. And I'm going to say console.log, and I'm going to print Hello world. And that's my for loop done. So let's test it out and see what happens. And we can see in the console, that hello world is being printed out 10 times. So that's what that number 10 means, it doesn't bother printing it out in ten rows. Okay it's not very exciting, lets try and do something a little bit more interesting. I am going to try and do some drawing now. So instead of using console.log, I'm going to use ellipse. So I'm going to just type an ellipse of 100 by 100 in position the 100 to 100. And, now you might be confused of this stage, because when we look at the output we can only see a single ellipse. But actually we are drawing ten ellipses, we're just happening to draw them all on top of each other. So we some how need to move these ellipses around so that we can see all ten. And the way I'm going to do this is actually use the function random. So I'm going to, instead of saying in position 100. I think I'm just going to say random, and let's say you can go anywhere between 0 and 200. And then I'm going to do the same for the y positions. So instead of saying 100 here, I'm going to put random and it could go anywhere between 0 and 200. I'll split this up on to separate lines, so you can really see the different arguments clearly. Okay let's try this out and see what we get. So now you can see with sorts of got ten ellipses but they're all kind of squashed around them in one corner. So what happened here is that this code has run 10 times and each time, it's picked a different random value for x and a different value for y. So maybe we want to spread both ellipses out a bit across the screen. So we can see they're actually canvas is 800 by 800, so why not choose random between 0 and 800 for each of these and have another go. And now we can see our ellipse is a much more spread up. So we don't have to stop with 10, we could have 100 ellipses. So I just need to change this number now to 100, and here we can see 100 ellipses. And maybe now we would start doing things like varying the colors. So I could choose the fill color here, and I could also make this a bit random. So I could say 0 to 255, we'll just do these in gray at the moment. And here you can see, now we have a hundred slightly different colored ellipsis. Okay, so so far, we've been doing this in the set up loop, and hopefully this much makes sense to you. But we now need to deal with using for loops in the draw function. And that is when things feel a little more complicated. The reason it feels more complicated is that the draw function, is itself a loop, it runs over and over again. So I'm going to create a draw function here. And what I'm going to do is I'm going to copy and paste my code from setup into draw. And I will just comment out the one in setup, just so that we don't get confused. And the first thing I'm going to do, is actually let's just try printing Hello world again. So if I go to my code and run this, we can see that Hello world is printing out 100 times, but it's doing it over and over and over again. So we're getting a lot of Hello world printing. This might be a little bit easier to understand. If we instead of printing Hello world, we print the frame number that we're currently on. And there's a keyword for this, is called frame counts. So I'm deleting Hello world here, and I'm going to put in frameCount. So frameCount just starts at zero and each time the draw loop runs, it goes up by one. So frameCount will go zero, one, two, three, so what we should see is zero being printed a hundred times. Then one being printed a hundred times and so on, let's try it out and see what happens. If I look in the console now, I can see that I'm printing this different numbers each 100 times. So this is the frameCount I've got 112 printed 100 times, 113 printed 100 times and so on. And let's stop working with text and try going back to our graphics again. So this time what I'm going to do is I'm going to comment out this console.log and uncomment this ellipse code. The other thing I think I should do is just clear the background so I'm going to have a command that sets the background to white every frame. Okay, so let's run it and see what happens. Okay, so now you can see with what's happening here is that we're getting a 100 ellipses drawn, but only for a single frame. And then a 100 more random ellipses are being drawn on the next frame. So we get this rapidly moving pattern. So we could do some experiments here, we could perhaps reduce the number of ellipses and see how the pattern appears different to us. So I'm going to go back to just drawing just 10 ellipses. So now you can see the density has changed quite a lot. It's much more sparse, because each frame are only drawing 10 ellipses. Or I could go the other way, I could put in 100 ellipses. And now we can see it looks much denser. I could be a little bit creative here, I could actually control this by using mouseX. So instead of putting this number as 1,000, I'm going to put in mouseX here. And now, I can control the density of the ellipses just by adjusting my mouse across the screen. You try experimenting with this yourself, see what other random elements you can add. For loops are notoriously tricky for newbies, so practice them a lot. Persevere and see what you can do. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 5.1 For Loops Video: Video Introducing the for loop . Duration: 12 minutes 12 min Practice Assignment: The for loop . Duration: 15 minutes 15 min Video: Video For loops using variable incrementation and the index variable . Duration: 9 minutes 9 min Practice Assignment: For loops using variable incrementation and the index variable . Duration: 6 minutes 6 min Video: Video Combining for loops with conditional statements . Duration: 10 minutes 10 min Practice Assignment: Combining for loops with conditional statements . Duration: 15 minutes 15 min Lesson 5.2 Arrays Lesson 5.3: Debugging techniques
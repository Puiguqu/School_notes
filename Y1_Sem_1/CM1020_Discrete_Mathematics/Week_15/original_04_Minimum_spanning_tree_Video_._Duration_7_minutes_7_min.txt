# Minimum spanning tree
Videoâ€¢
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-discrete-mathematics/lecture/ktfeY/minimum-spanning-tree

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key In this lesson, we will start by looking at an example of a situation where minimum cost spanning trees are helpful. We will then give a definition of the weight of a spanning tree. We will then define the minimum cost of a spanning tree. We will also give an overview of Kruskal's algorithms for finding minimum cost spanning trees and show how the algorithm works with an example. Finally, we will give an overview of Prim's algorithm and show how it works using an example. Let's suppose we want to supply a set of houses with electric power, water pipes, sewage line, or telephone lines. To keep the cost down, we could connect these houses with a spanning tree power lines, for example. To reduce costs even further, we could connect the houses with a minimum cost spanning tree. Suppose you have a connected undirected graph with weight or cost associated with each edge. The cost of a spanning tree will be the sum of the costs of its edges. For instance, let's consider the following connected and undirected graph G. The weight or cost of the spanning tree T1 is 8+9+6+7+3=33. The weight of the spanning tree, T2 is 6+9+5+2+7=29. The weight of the spanning tree T3=8+6+4+1+2, which is equal to 21. A minimum cost spanning tree is a spanning tree that has the lowest weight or lowest cost. For instance, let's consider the connected and undirected graph G again. T4 is a minimum cost spanning tree as it is a spanning tree of G with the lowest cost. There are two basic algorithms for finding minimum cost spanning trees. There are Kruskal's algorithm and Prim's algorithm. In the rest of this lesson, we will explain how these two algorithms work in practice. In Kruskal's algorithm, we start with the cheapest edge in the spanning tree. Repeatedly add the cheapest edge that keeps the tree connected but free from in cycles. Let's see an example of how it works. Let's consider the following connected and undirected weighted graph G and use Kruskal's algorithm to find a minimum spanning tree. Let's initialize T with all the vertices of G. Then we pick the edge with the smallest weight that is not part of the tree T, and check if adding this edge to T forms a cycle. If not, this edge will be added to the spanning tree. In the first iteration, we will add the edge BD. In the second iteration, we will add the edge BC. In the third iteration, we will add the edge BF. We didn't consider the edge DC because it's forms of cycle in T. In the fourth iteration, we will add the edge BA. In the fifth iteration, we will add the edge DE. At the end of this process, we have built one possible minimum cost spanning tree. When using Prim's algorithm, we start with any node in the spanning tree. Repeatedly at the cheapest edge incident to that node and the node it leads to if the node isn't already in the spanning tree. We will now look at an example to demonstrate Prim's algorithm. Let's consider the following weighted connected and undirected graph and use Prim's algorithm to find the minimum cost spanning tree of this graph. Let's pick an arbitrary node let it be A. First, add A to T and choose the smallest edge connected to A. In this case, it's B and the edge AB is added to T. We then consider all the vertices connected to A or B, not part of the tree T, and pick one edge with the smallest weight. In this case is D, and add the edge BD to the tree T. We then consider all the vertices connected to A, B, or D, not part of the tree T and pick one edge with the smallest weight. In this case, it's C, and add the edge BC to the tree T. We then consider all the vertices connected to A, B, D, or C, not part of tree T, and pick one edge with the smallest weight. In this case, it's F and add BF to the tree T. Finally, the smallest remaining edge, DE is added to the tree T. The resulting tree T is now a minimum spanning tree of the graph G. In this lesson, we started by considering an example of a situation where minimum cost spanning trees are useful. We then gave a definition of the weight of a spanning tree. We then define minimum cost spanning trees. Finally, we introduced Kruskal's and Prim's algorithms which can be used to find the minimum cost spanning trees. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Video: Video Topic 8 introduction . Duration: 2 minutes 2 min Discussion Prompt: Applications of trees . Duration: 20 minutes 20 min Video: Video Definition of a tree . Duration: 5 minutes 5 min Practice Assignment: Definition of a tree . Duration: 20 minutes 20 min Video: Video Spanning trees of a graph . Duration: 3 minutes 3 min Practice Assignment: Spanning trees of a graph . Duration: 20 minutes 20 min Video: Video Minimum spanning tree . Duration: 7 minutes 7 min Practice Assignment: Minimum spanning tree . Duration: 20 minutes 20 min Reading: Reading Topic 8 essential reading . Duration: 30 minutes 30 min
# Modularity
Video•
. Duration: 2 minutes
2 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/sftXs/modularity

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key Modularity is another important Computer Science concept that's based on abstraction. Computer systems are very complex, but we can understand them better and build the more easily by splitting them into smaller chunks, which we call modules. Modularity is about creating systems that are made up of simple modules that interact with each other. We've already seen that this is true of computers. They're made up of lots of components like the CPU, memory, hard disks and displays. But modularity isn't just for hardware, in fact it's even more important for software. The developers of complex software don't create it from scratch, but make use of existing elements that may come from the operating system, or open source software, or other software developers. Even the software they developed themselves, tends to be split into modules to make it easier to manage. A good example of a module is a hardware driver. Every single printer, or hard disk, or sound card works slightly differently at the hardware level. So, the code needed to control it is different. If software developers had to write their own code for controlling every single printer or sound card in the market, it would be a nightmare. Not only would it at least double the work of creating software, if someone releases new hardware, it would not work without software. To get around the problem, software that controls the hardware is independent of any application. These little bits of software are called drivers. They're generally written by hardware vendors. They're added to your operating system when you install the hardware and allow every different bit of hardware to interact with your applications in the same way. Drivers may call hardware look the same to the software, just like the steering wheels and pedals on old cars were more or less the same way even if the engines of those steering wheels and pedals are connected to are very different. Application developers only need to write one bit of code to interact with the drivers. The hardware developers only have two write one driver. As long as they're consistent, every application can interact with every bit of hardware. Modularity is really helpful if you're developing software. But it's also useful if you want to understand software. Knowing the modules that make up a piece of software is a key part of developing a good notional machine. So, learning about the different components will help you understand software better. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 2.1 State Lesson 2.2 Modularity and applications Video: Video A notional machine: files . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – A notional machine: Files . Duration: 10 minutes 10 min Practice Assignment: Files . Duration: 15 minutes 15 min Video: Video Modularity . Duration: 2 minutes 2 min Video: Video Applications . Duration: 5 minutes 5 min Practice Assignment: Practice quiz - Applications . Duration: 10 minutes 10 min Reading: Reading Looking inside applications . Duration: 20 minutes 20 min Video: Video Debugging . Duration: 6 minutes 6 min Practice Assignment: Practice quiz – Debugging an application problem . Duration: 30 minutes 30 min Reading: Reading Modularity and applications – lecture summaries . Duration: 10 minutes 10 min Lesson 2.3 Summary
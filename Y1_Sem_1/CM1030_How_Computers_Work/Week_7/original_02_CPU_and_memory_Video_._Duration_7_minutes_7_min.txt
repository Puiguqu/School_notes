# CPU and memory
Video•
. Duration: 7 minutes
7 min

URL: https://www.coursera.org/learn/uol-how-computers-work/lecture/9MiBV/cpu-and-memory

## VIDEO TRANSCRIPT ## You may navigate through the transcript using tab. To save a note for a section of text press CTRL + S. To expand your selection you may use CTRL + arrow key. You may contract your selection using shift + CTRL + arrow key. For screen readers that are incompatible with using arrow keys for shortcuts, you can replace them with the H J K L keys. Some screen readers may require using CTRL in conjunction with the alt key You've already learned a little bit about the hardware of a computer. You know that it has memory chips and these interact with a CPU. You've also learned quite a bit about how data is represented in memory, which is the store of your computer and where most of your data sits at least while the computer is running. The CPU is the active part, it does stuff. We haven't learned much about it yet. The first thing you need to know is that data is moved between memory and the CPU by something called the bus. A bus is just a set of wiring that connects the CPU and the memory and allows fast interchange between the two of them. In the CPU there is a whole mass of complex electronics that implements various activities and instructions, but most importantly is probably the arithmetic logical unit. This performs numerical mathematical calculations, which in many ways make up the core of what a computer does. There is also something called the control unit. The control unit controls the running of the program. In an earlier video we saw that loads of what the program we were looking at does is essentially maths, such as adding things together and adding values to variables, but some of it is control. The if statement we looked at in the previous lecture is an example of control. A particular instruction can control whether we do one bit of code or a different bit of code. It's making a choice. These are the elements of the CPU that do calculations and other operations, but that's not all. We also have something called registers. Registers are another bit of memory that can store data. They're much tinier than the main memory. You only have a few registers, but they're actually on the CPU, so they can be accessed very quickly as opposed to the relatively long time that it takes to reach main memory. Instead of doing calculations directly with things in memory which has a long way away on a different microchip, the CPU does calculations on data that's stored in registers. What happens when I want to do something with a bit of data? Firstly, I load it from memory into a register. Then from the registrar can manipulate it using the arithmetic logical unit, all the actual calculations are happening in those registers. When they're finished, I can write the data back to memory and then it's done. The CPU does not act directly on memory, but does calculations on data that's stored in its registers. I'll add one other thing. Often the CPU has other bigger bits of memory either on the chip itself or very close to it. This is called the cache. The cache is a smaller, but faster set of memory that you can access more quickly than main memory. Though it's slower than the registers. It's used to store values that the CPU is likely to use. It can contain a lot more data than the registers and act similarly to main memory, but faster. A lot of the performance of your computer depends on access to memory and particularly how big and faster cache is. How does the CPU actually do its calculations? Well, in order to do them, it has to form instructions. Later we'll come on to what an instruction actually is. For now, we can think of it as the code that acts on data in registers. Where does the code come from? Well, it's stored in memory just like data. This is something called the stored program concept. There isn't anything special about code. It's not hardwired into the computer that would make it impossible to install new software. It's just stored in memory like any other data, which is a fantastic idea because it allows us to use the software we want on our computers. But how does that work? How does the CPU know what instructions should be following? The answer is, it has two special registers. One is the program counter. The program counter does, is tell the CPU where the current instruction is in memory. The CPU also has an instructions register, which is where the actual current instruction is stored. Whenever the CPU finishes its current instruction, it looks at the program counter and gets the data from that memory location. It loads the data into the instruction register. Whatever binary pattern is in the instruction register, will be interpreted as if it is an instruction and execute it. This is sometimes called the fetch execute cycle. With this, you can fetch an instruction from memory based on the program counter and then execute that instruction. Essentially you perform the actions. You'll see a little bit more in the next few videos about how exactly that execution works. Those are the basics of the CPU. It has a lot of interacting features like control, arithmetic calculations, registers, cache, memory in the bus. It's easy to think the most important thing that will influence the performance of your computer is a CPU and in particular the speed of the CPU, which is magnitude in gigahertz. What that means is basically how many instructions per second the CPU can execute. It doesn't exactly mean that look pretty much, but there were actually loads of other factors that can influence the computer's performance. Computer can execute instructions very quickly, but going and fetching data from memory is a lot slower and how long that takes will depend on the bus speed. Since lots of what a computer does is actually calculations on data, it's likely to do a lot of fetching from memory. A lot of the time your bus speed and your memory speed are more important to your computer's performance than your CPU speed. A really important element is your cache, because your cache is the way that the CPU avoids having to go all the way to memory every time it needs some data. Having a big and fast cache can really see your computer up much more than adding a few gigahertz to your processor. When you're considering buying a computer, yes, you should look at how many gigahertz it has, but things like your cache, your bus and your memory will also have a big impact on it's performance. ## END TRANSCRIPT ## ## ADDITIONAL PAGE CONTENT ## Lesson 7.0 Introduction Lesson 7.1 Computer architecture Video: Video CPU and memory . Duration: 7 minutes 7 min Reading: Reading CPU and memory – Lecture summary . Duration: 10 minutes 10 min Practice Assignment: Practice quiz - CPU and memory . Duration: 15 minutes 15 min Reading: Reading Computer architecture . Duration: 45 minutes 45 min Practice Assignment: Practice quiz - Computer architecture . Duration: 30 minutes 30 min Lesson 7.2 Machine language and execution